!function(){"use strict";var e={};function r(e,r){return function(e){if(Array.isArray(e))return e}(e)||function(e,r){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var n,a,o,s,i=[],l=!0,c=!1;try{if(o=(t=t.call(e)).next,0===r){if(Object(t)!==t)return;l=!1}else for(;!(l=(n=o.call(t)).done)&&(i.push(n.value),i.length!==r);l=!0);}catch(e){c=!0,a=e}finally{try{if(!l&&null!=t.return&&(s=t.return(),Object(s)!==s))return}finally{if(c)throw a}}return i}}(e,r)||t(e,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function t(e,r){if(e){if("string"==typeof e)return n(e,r);var t={}.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?n(e,r):void 0}}function n(e,r){(null==r||r>e.length)&&(r=e.length);for(var t=0,n=Array(r);t<r;t++)n[t]=e[t];return n}e.d=function(r,t){for(var n in t)e.o(t,n)&&!e.o(r,n)&&Object.defineProperty(r,n,{enumerable:!0,get:t[n]})},e.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)};var a="https://sqexcel.up.railway.app";function o(){try{var e=localStorage.getItem("seeq_credentials");if(e){var r=JSON.parse(e),t=new Date(r.timestamp);if(((new Date).getTime()-t.getTime())/36e5<24)return r;localStorage.removeItem("seeq_credentials")}return null}catch(e){return null}}function s(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;try{var t=new XMLHttpRequest,n="".concat(a).concat(e);if(t.open(r?"POST":"GET",n,!1),t.setRequestHeader("Content-Type","application/json"),r?t.send(JSON.stringify(r)):t.send(),200!==t.status)return{success:!1,error:"HTTP ".concat(t.status,": ").concat(t.statusText),responseText:t.responseText,url:n};try{return JSON.parse(t.responseText)}catch(e){return{success:!1,error:"Failed to parse response: ".concat(e.message),rawResponse:t.responseText}}}catch(r){return{success:!1,error:"Backend request failed: ".concat(r instanceof Error?r.message:"Unknown error"),details:r instanceof Error?r.stack:"No stack trace",url:"".concat(a).concat(e)}}}function i(e){if(!e||"string"!=typeof e)return null;var t=e.trim();if(/^\d+(?:\.\d+)?$/.test(t)){var n=parseFloat(t);if(!isNaN(n)&&n>0&&n<1e5){var a=n-25569,o=Math.round(864e5*a),s=new Date(o).getTimezoneOffset();return new Date(o+6e4*s)}}if(e.includes("T")){var i=new Date(e);return isNaN(i.getTime())?null:i}var l=t.match(/^(\d{4})-(\d{2})-(\d{2})\s+(\d{2}):(\d{2}):(\d{2})$/);if(l){var c=r(l,7),u=c[1],m=c[2],f=c[3],d=c[4],p=c[5],h=c[6];return new Date(parseInt(u,10),parseInt(m,10)-1,parseInt(f,10),parseInt(d,10),parseInt(p,10),parseInt(h,10))}var g=new Date(e);return isNaN(g.getTime())?null:g}CustomFunctions.associate("PULL",function(e,t,n,a,l){try{var c,u,m=e.flat().filter(function(e){return e&&""!==e.trim()});if(0===m.length)return[["Error: No sensor names provided"]];if(c=i(t),u=i(n),!c||!u)return[["Error: Invalid datetime format. Use formats like: 8/1/2025 0:00 or 2024-01-01T00:00:00"]];var f=u.getTime()-c.getTime(),d=Math.floor(f/1e3);if(c>=u)return[["Error: Start datetime must be before end datetime"]];var p,h=a||"points",g=l||("points"===h?1e3:"15min");if("grid"!==h&&"points"!==h)return[["Error: Mode must be 'grid' or 'points'"]];if("grid"===h){if(p=String(g),!/^(\d+)(min|h|d|s)$/.test(p))return[["Error: Invalid grid format. Use format like '15min', '1h', '1d', '30s'"]]}else{var v="number"==typeof g?g:parseInt(String(g));if(isNaN(v)||v<=0)return[["Error: Number of points must be a positive integer"]];var y=Math.floor(d/v);if(y<1)return[["Error: Time range too short for requested number of points. Try fewer points or a longer time range."]];p="".concat(y,"s")}var w=o();if(!w)return[["Error: Not authenticated to Seeq. Please use the SqExcel taskpane to authenticate first."]];var _=s("/api/seeq/sensor-data",{sensorNames:m,startDatetime:t,endDatetime:n,grid:p,userTimezone:function(){try{return Intl.DateTimeFormat().resolvedOptions().timeZone||"UTC"}catch(e){return"UTC"}}(),url:w.url,accessKey:w.accessKey,password:w.password,authProvider:"Seeq",ignoreSslErrors:!1});if(_.success&&_.data&&_.data.length>0){var E=["Timestamp"].concat(_.data_columns||[]),k=_.data.map(function(e){var t=function(e){try{var t=null;if("number"==typeof e&&e>0&&e<1e5)return e;if("string"==typeof e&&/^\d+(?:\.\d+)?$/.test(e.trim())){var n=parseFloat(e.trim());if(!isNaN(n)&&n>0&&n<1e5)return n}if(e instanceof Date)t=new Date(e.getTime());else if("number"==typeof e)if(e>1e11)t=new Date(e);else if(e>1e9&&e<1e11)t=new Date(1e3*e);else{if(e>0&&e<1e5)return e;t=new Date(e)}else if("string"==typeof e){var a=e.match(/^(\d{4})-(\d{2})-(\d{2})\s+(\d{2}):(\d{2}):(\d{2})$/);if(a){var o=r(a,7),s=o[1],l=o[2],c=o[3],u=o[4],m=o[5],f=o[6];t=new Date(parseInt(s),parseInt(l)-1,parseInt(c),parseInt(u),parseInt(m),parseInt(f),0)}else{var d=i(e);if(d&&!isNaN(d.getTime()))t=d;else{var p=new Date(e);t=isNaN(p.getTime())?null:p}}}if(!t||isNaN(t.getTime()))return 0;var h=t.getTimezoneOffset();return(t.getTime()-6e4*h)/864e5+25569}catch(e){return 0}}(e.Timestamp||e.index||"N/A"),n=(_.data_columns||[]).map(function(r){return void 0!==e[r]?e[r]:"N/A"});return[t].concat(n)});return[E].concat(k)}return _.error&&_.error.includes("Failed to fetch")||_.error.includes("NetworkError")?[["Backend server not running"],["Please start the backend server:"],["1. Open terminal in the backend folder"],["2. Run: npm install && npm start"],["3. Then use this function again"]]:[["No data returned"],["Error: "+(_.error||_.message||"Unknown error")],["Sensors: "+m.join(", ")],["Time Range: "+t+" to "+n]]}catch(e){return[["Error: "+(e instanceof Error?e.message:"Unknown error")]]}}),CustomFunctions.associate("SEARCH_SENSORS",function(e){try{var r=e.flat().filter(function(e){return e&&""!==e.trim()});if(0===r.length)return[["Error: No sensor names provided"]];var t=o();if(!t)return[["Error: Not authenticated to Seeq. Please use the SqExcel taskpane to authenticate first."]];var n=s("/api/seeq/search-sensors",{sensorNames:r,url:t.url,accessKey:t.accessKey,password:t.password,authProvider:"Seeq",ignoreSslErrors:!1});if(n.success&&n.search_results&&n.search_results.length>0){var a=n.search_results.map(function(e){return[e.Name||"N/A",e.ID||"Not Found",e["Datasource Name"]||"N/A",e["Value Unit Of Measure"]||"N/A",e.Description||"N/A"]});return[["Name","ID","Datasource Name","Value Unit Of Measure","Description"]].concat(a)}return n.error&&n.error.includes("Failed to fetch")||n.error.includes("NetworkError")?[["Backend server not running"]]:[["No search results returned"],["Error: "+(n.error||n.message||"Unknown error")],["Sensors: "+r.join(", ")]]}catch(e){return[["Error: "+(e instanceof Error?e.message:"Unknown error")]]}}),CustomFunctions.associate("CURRENT",function(e){try{if(!e||"string"!=typeof e||""===e.trim())return"Error: Sensor name is required";var r=o();if(!r)return"Error: Not authenticated to Seeq. Please use the SqExcel taskpane to authenticate first.";var t=new Date,n=t.toISOString(),a=new Date(t.getTime()-6e4).toISOString(),i=function(){try{return Intl.DateTimeFormat().resolvedOptions().timeZone||"UTC"}catch(e){return"UTC"}}(),l=s("/api/seeq/sensor-data",{sensorNames:[e.trim()],startDatetime:a,endDatetime:n,grid:"1s",userTimezone:i,url:r.url,accessKey:r.accessKey,password:r.password,authProvider:"Seeq",ignoreSslErrors:!1});if(l.success&&Array.isArray(l.data)&&l.data.length>0){var c=l.data_columns||[];if(!c||0===c.length)return"Error: No data columns returned";var u=c[0],m=(l.data[l.data.length-1]||{})[u];return null!=m?m:"Error: No current value available"}return"Error: "+(l.error||l.message||"No data returned")}catch(e){return"Error: "+(e instanceof Error?e.message:"Unknown error")}}),CustomFunctions.associate("AVERAGE",function(e,r,n){try{if(!e||"string"!=typeof e||""===e.trim())return"Error: Sensor name is required";var a=i(r),l=i(n);if(!a||!l)return"Error: Invalid datetime format. Use formats like: 8/1/2025 0:00 or 2024-01-01T00:00:00";if(a>=l)return"Error: Start datetime must be before end datetime";var c=o();if(!c)return"Error: Not authenticated to Seeq. Please use the SqExcel taskpane to authenticate first.";var u=Math.floor((l.getTime()-a.getTime())/1e3),m=Math.floor(u/100);if(m<1)return"Error: Time range too short for 100 points. Use a longer range.";var f="".concat(m,"s"),d=function(){try{return Intl.DateTimeFormat().resolvedOptions().timeZone||"UTC"}catch(e){return"UTC"}}(),p=s("/api/seeq/sensor-data",{sensorNames:[e.trim()],startDatetime:r,endDatetime:n,grid:f,userTimezone:d,url:c.url,accessKey:c.accessKey,password:c.password,authProvider:"Seeq",ignoreSslErrors:!1});if(p.success&&Array.isArray(p.data)&&p.data.length>0){var h=p.data_columns||[];if(!h||0===h.length)return"Error: No data columns returned";var g,v=h[0],y=0,w=0,_=function(e){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=t(e))){r&&(e=r);var n=0,a=function(){};return{s:a,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,s=!0,i=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return s=e.done,e},e:function(e){i=!0,o=e},f:function(){try{s||null==r.return||r.return()}finally{if(i)throw o}}}}(p.data);try{for(_.s();!(g=_.n()).done;){var E=g.value[v];if("number"==typeof E)y+=E,w+=1;else if("string"==typeof E){var k=parseFloat(E);isNaN(k)||(y+=k,w+=1)}}}catch(e){_.e(e)}finally{_.f()}return 0===w?"Error: No numeric data to average":y/w}return"Error: "+(p.error||p.message||"No data returned")}catch(e){return"Error: "+(e instanceof Error?e.message:"Unknown error")}}),CustomFunctions.associate("CREATE_PLOT_CODE",function(e,r,t,n,a,l,c,u,m,f,d,p){try{var h,g=n||100,v=a||.3,y=l||5,w=void 0===c||c,_=void 0===u||u,E=m||.9,k=f||"red",T=d||"sparkline",N=p||"Value",b=e.flat().filter(function(e){return e&&""!==e.trim()});if(0===b.length)return"Error: No sensor names provided";var S=b[0],x=i(r),D=i(t);if(!x||!D)return"Error: Invalid datetime format. Use formats like: 8/1/2025 0:00 or 2024-01-01T00:00:00";if(x>=D)return"Error: Start datetime must be before end datetime";var I=D.getTime()-x.getTime(),q=Math.floor(I/1e3),F=Math.floor(q/g);if(F<1)return"Error: Time range too short for requested number of points. Try fewer points or a longer time range.";var z="".concat(F,"s"),O=o();if(!O)return"Error: Not authenticated to Seeq. Please use the SqExcel taskpane to authenticate first.";var U=s("/api/seeq/sensor-data",{sensorNames:[S],startDatetime:r,endDatetime:t,grid:z,userTimezone:function(){try{return Intl.DateTimeFormat().resolvedOptions().timeZone||"UTC"}catch(e){return"UTC"}}(),url:O.url,accessKey:O.accessKey,password:O.password,authProvider:"Seeq",ignoreSslErrors:!1});if(!U.success||!U.data||0===U.data.length){var A="Error: No data returned from sensor. ";return U.error&&(A+="Error: "+U.error),U.message&&(A+=" Message: "+U.message),U.status_code&&(A+=" Status: "+U.status_code),U.responseText&&(A+=" Response: "+U.responseText.substring(0,200)),A}var C=[],P=[],j=null===(h=U.data_columns)||void 0===h?void 0:h[0];if(!j)return"Error: No data columns returned";if(U.data.forEach(function(e){var r,t=e.Timestamp||e.index,n=e[j];void 0!==t&&void 0!==n&&(r=t instanceof Date?t.toISOString():"number"==typeof t?new Date(t>1e5?t:864e5*(t-25569)).toISOString():String(t),C.push(r),P.push(n))}),0===C.length)return"Error: No valid data points found";var M=function(e,r,t,n,a,o,s,i,l,c){var u=e.map(function(e){return"'".concat(e,"'")}).join(", "),m=r.map(function(e){return"number"==typeof e?e.toString():"'".concat(e,"'")}).join(", ");return"import pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nfrom datetime import datetime\n\n# Data from Seeq sensor\ntimestamps = [".concat(u,"]\nsensor_values = [").concat(m,"]\n\n# Convert timestamps to datetime objects\ntimestamps = [datetime.fromisoformat(ts.replace('Z', '+00:00')) for ts in timestamps]\n\n# Create DataFrame\ndf = pd.DataFrame({'timestamp': timestamps, 'sensor_value': sensor_values})\n\n# Plot parameters\nheight = ").concat(t,"\naspect_ratio = ").concat(n,"\nshow_line = ").concat(a?"True":"False","\nshow_points = ").concat(o?"True":"False","\nopacity = ").concat(s,"\ncolor = '").concat(i,"'\nstyle = '").concat(l,"'  # 'normal', 'minimal', or 'sparkline'\nlabel = '").concat(c,"'\n\n# Calculate marker size and line width based on figure height\nbase_markersize = 2.2\nbase_linewidth = 2\nmax_marker_size = 4\nopacity_ratio = 0.7  # lower means fainter lines\n\nscaled_markersize = min(base_markersize * height, max_marker_size)\nscaled_linewidth = base_linewidth / base_markersize * scaled_markersize\n\nplt.figure(figsize=(height * aspect_ratio, height), facecolor='#F7F7F7')\nlinestyle = '-' if show_line else 'None'\nmarker = 'o' if show_points else 'None'\nline_alpha = opacity * opacity_ratio if show_points else opacity\nplt.plot(df['timestamp'], df['sensor_value'], linestyle=linestyle, marker=marker, linewidth=scaled_linewidth, markersize=scaled_markersize, color=color, alpha=line_alpha, markerfacecolor=color, markeredgecolor=color, markerfacecoloralt=color)\nif show_points:\n    plt.plot(df['timestamp'], df['sensor_value'], linestyle='None', marker='o', markersize=scaled_markersize, color=color, alpha=opacity)\n\nif style == 'normal':\n    plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%m-%d-%y %H:%M'))\n    plt.xticks(rotation=45, ha='right')\n    plt.ylabel(label)\n    plt.tight_layout()\nelif style == 'minimal':\n    # Only show first and last timestamp\n    ax = plt.gca()\n    ax.set_xticks([df['timestamp'].iloc[0], df['timestamp'].iloc[-1]])\n    ax.xaxis.set_major_formatter(mdates.DateFormatter('%m-%d-%y %H:%M'))\n    plt.xticks(rotation=0, ha='center')  # Flat text direction\n    plt.ylabel(label)\n    # Remove grid lines\n    ax.grid(False)\n    # Maximize figure area - remove margins\n    plt.subplots_adjust(left=0.1, right=1.0, top=1.0, bottom=0.15)\nelif style == 'sparkline':\n    # Create a new figure without frame for sparkline\n    plt.clf()  # Clear the figure\n    plt.gcf().patch.set_visible(False)  # Remove figure background/frame\n    ax = plt.axes([0, 0, 1, 1])  # Create axes that fill entire figure\n    \n    # Plot the data again since we cleared the figure\n    plt.plot(df['timestamp'], df['sensor_value'], linestyle=linestyle, marker=marker, \n             linewidth=scaled_linewidth, markersize=scaled_markersize, color=color, \n             alpha=line_alpha, markerfacecolor=color, markeredgecolor=color)\n    if show_points:\n        plt.plot(df['timestamp'], df['sensor_value'], linestyle='None', marker='o', \n                 markersize=scaled_markersize, color=color, alpha=opacity)\n    \n    # Remove all spines\n    for k, v in ax.spines.items():\n        v.set_visible(False)\n    ax.set_xticks([])\n    ax.set_yticks([])\n    \n    # Remove grid and set margins to zero\n    ax.grid(False)\n    ax.margins(0)\n    \n    # Get min/max values for annotations\n    y_min = df['sensor_value'].min()\n    y_max = df['sensor_value'].max()\n    \n    # Add min/max as text annotations positioned within plot area\n    ax.text(1, 0.99, f'{y_max:.1f}', transform=ax.transAxes, fontsize=8, \n            verticalalignment='top', horizontalalignment='left', color='black')\n    ax.text(1, 0.01, f'{y_min:.1f}', transform=ax.transAxes, fontsize=8, \n            verticalalignment='bottom', horizontalalignment='left', color='black')\n\nplt.show()")}(C,P,v,y,w,_,E,k,T,N);return M}catch(e){return"Error: "+(e instanceof Error?e.message:"Unknown error")}})}();
//# sourceMappingURL=functions.js.map