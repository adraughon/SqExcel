{"version":3,"file":"functions.js","mappings":"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","sources":["webpack://excel-custom-functions/webpack/bootstrap","webpack://excel-custom-functions/webpack/runtime/define property getters","webpack://excel-custom-functions/webpack/runtime/hasOwnProperty shorthand","webpack://excel-custom-functions/./src/functions/functions.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global clearInterval, console, CustomFunctions, setInterval, XMLHttpRequest */\n\n/**\n * SqExcel Custom Functions\n * \n * This add-in provides 2 Excel functions for working with Seeq data:\n * - SEARCH_SENSORS: Search for sensors in your Seeq environment\n * - PULL: Pull time series data from Seeq sensors\n * \n * SETUP INSTRUCTIONS:\n * 1. Create a Seeq Access Key:\n *    - Go to your Seeq environment\n *    - Click on your username in the top right\n *    - Select \"Create Access Key\"\n *    - Copy both the Key (ID) and Password - you'll need both!\n * \n * 2. Authenticate in Excel:\n *    - Open the SqExcel taskpane (if not visible, go to Insert > My Add-ins)\n *    - Enter your Seeq server URL (e.g., https://your-server.seeq.tech)\n *    - Enter the Access Key and Password from step 1\n *    - Click \"Authenticate\"\n *    - Once authenticated, you can use the Excel functions below\n * \n * 3. Using the Functions:\n *    - SEARCH_SENSORS: =SEARCH_SENSORS(A1:C1) where A1:C1 contains sensor names\n *    - PULL: =PULL(A1:C1,\"2024-01-01T00:00:00\",\"2024-01-31T23:59:59) - defaults to 1000 points\n *    - PULL with grid: =PULL(A1:C1,\"2024-01-01T00:00:00\",\"2024-01-31T23:59:59\",\"grid\",\"15min\")\n *    - PULL with points: =PULL(A1:C1,\"2024-01-01T00:00:00\",\"2024-01-31T23:59:59,\"points\",500)\n * \n * TROUBLESHOOTING:\n * - If you see \"#NAME?\" errors, make sure the add-in is properly loaded\n * - If authentication fails, check your Seeq server URL and credentials\n * - If data doesn't load, verify your sensor names exist in Seeq\n * - For detailed diagnostics, run a connection test in the taskpane\n */\n\n\n// Backend server configuration\nconst BACKEND_URL = 'https://sqexcel.up.railway.app';\n\n/**\n * Helper function to get stored Seeq credentials from localStorage\n */\nfunction getStoredCredentials(): any {\n  try {\n    // Get credentials from localStorage (same storage used by taskpane)\n    const saved = localStorage.getItem(\"seeq_credentials\");\n    if (saved) {\n      const credentials = JSON.parse(saved);\n      \n      // Check if credentials are still valid (not expired)\n      const savedTime = new Date(credentials.timestamp);\n      const now = new Date();\n      const hoursDiff = (now.getTime() - savedTime.getTime()) / (1000 * 60 * 60);\n      \n      if (hoursDiff < 24) { // Credentials valid for 24 hours\n        return credentials;\n      } else {\n        // Credentials expired, remove them\n        localStorage.removeItem(\"seeq_credentials\");\n      }\n    }\n    return null;\n  } catch (error) {\n    return null;\n  }\n}\n\n/**\n * Helper function to make synchronous HTTP requests to the backend server\n * Note: This uses XMLHttpRequest synchronously, which is deprecated but works in Excel custom functions\n */\nfunction callBackendSync(endpoint: string, data: any = null): any {\n  try {\n    const xhr = new XMLHttpRequest();\n    const url = `${BACKEND_URL}${endpoint}`;\n    \n    \n    // Use synchronous request (deprecated but works in Excel custom functions)\n    xhr.open(data ? 'POST' : 'GET', url, false);\n    xhr.setRequestHeader('Content-Type', 'application/json');\n    \n    \n    if (data) {\n      xhr.send(JSON.stringify(data));\n    } else {\n      xhr.send();\n    }\n    \n    \n    if (xhr.status === 200) {\n      try {\n        const parsed = JSON.parse(xhr.responseText);\n        return parsed;\n      } catch (e) {\n        return {\n          success: false,\n          error: `Failed to parse response: ${(e as Error).message}`,\n          rawResponse: xhr.responseText\n        };\n      }\n    } else {\n      return {\n        success: false,\n        error: `HTTP ${xhr.status}: ${xhr.statusText}`,\n        responseText: xhr.responseText,\n        url: url\n      };\n    }\n  } catch (error) {\n    return {\n      success: false,\n      error: `Backend request failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      details: error instanceof Error ? error.stack : 'No stack trace',\n      url: `${BACKEND_URL}${endpoint}`\n    };\n  }\n}\n\n\n/**\n * Helper function to convert timestamps to Excel serial numbers\n * Returns Excel's internal date representation for better compatibility\n * Excel serial number = (JS timestamp / (1000 * 60 * 60 * 24)) + 25569\n * \n * Note: These serial numbers will display as large numbers (e.g., 45870.0)\n * To see them as readable dates, users should:\n * 1. Select the timestamp column\n * 2. Right-click → Format Cells → Date\n * 3. Choose desired date format (e.g., \"3/14/12 1:30 PM\")\n * \n * This function preserves the original timezone information from the backend\n * to ensure timestamps display correctly in the user's local timezone.\n */\nfunction convertToExcelSerialNumber(timestamp: any): number {\n  try {\n    // Normalize the input into a Date representing the intended moment-in-time\n    let date: Date | null = null;\n\n    // If it's already an Excel serial (number or numeric string), just return it directly\n    if (typeof timestamp === 'number' && timestamp > 0 && timestamp < 100000) {\n      return timestamp;\n    }\n    if (typeof timestamp === 'string' && /^\\d+(?:\\.\\d+)?$/.test(timestamp.trim())) {\n      const asNum = parseFloat(timestamp.trim());\n      if (!isNaN(asNum) && asNum > 0 && asNum < 100000) {\n        return asNum;\n      }\n    }\n\n    if (timestamp instanceof Date) {\n      date = new Date(timestamp.getTime());\n    } else if (typeof timestamp === 'number') {\n      // Heuristics:\n      // - Excel serials are usually < 100000\n      // - Unix ms timestamps are > 10^11, Unix seconds are between 10^9 and 10^10\n      if (timestamp > 1e11) {\n        // treat as Unix milliseconds\n        date = new Date(timestamp);\n      } else if (timestamp > 1e9 && timestamp < 1e11) {\n        // treat as Unix seconds\n        date = new Date(timestamp * 1000);\n      } else if (timestamp > 0 && timestamp < 100000) {\n        // If a caller sent a number that is clearly an Excel serial, return it directly\n        return timestamp;\n      } else {\n        // Fallback: treat as ms\n        date = new Date(timestamp);\n      }\n    } else if (typeof timestamp === 'string') {\n      // Handle ISO-like strings directly (native will keep instant with timezone if present)\n      // Also handle \"YYYY-MM-DD HH:MM:SS\" as local time\n      const localMatch = timestamp.match(/^(\\d{4})-(\\d{2})-(\\d{2})\\s+(\\d{2}):(\\d{2}):(\\d{2})$/);\n      if (localMatch) {\n        const [, y, m, d, hh, mm, ss] = localMatch;\n        date = new Date(parseInt(y), parseInt(m) - 1, parseInt(d), parseInt(hh), parseInt(mm), parseInt(ss), 0);\n      } else {\n        // Try custom parser for M/D/YYYY style and AM/PM variants\n        const parsed = parseDate(timestamp);\n        if (parsed && !isNaN(parsed.getTime())) {\n          date = parsed;\n        } else {\n          // Native parse (will interpret without timezone as local)\n          const nd = new Date(timestamp);\n          date = isNaN(nd.getTime()) ? null : nd;\n        }\n      }\n    }\n\n    if (!date || isNaN(date.getTime())) {\n      return 0;\n    }\n\n    // Convert to Excel serial number using UTC components plus local offset once.\n    // This preserves exact wall-clock minutes/seconds and avoids double-offsetting across DST.\n    const tzOffsetMin = date.getTimezoneOffset();\n    const utcMs = date.getTime();\n    const localWallClockMs = utcMs - tzOffsetMin * 60000;\n    const serial = localWallClockMs / 86400000 + 25569;\n\n    return serial;\n  } catch (_err) {\n    return 0;\n  }\n}\n\n/**\n * Custom date parsing function to handle various date formats consistently\n * @param dateString - Date string in various formats\n * @returns Date object or null if parsing fails\n */\nfunction parseDate(dateString: string): Date | null {\n  if (!dateString || typeof dateString !== 'string') {\n    return null;\n  }\n\n  // Excel serial numbers (plain numeric strings under 100000)\n  const trimmed = dateString.trim();\n  if (/^\\d+(?:\\.\\d+)?$/.test(trimmed)) {\n    const serialNumber = parseFloat(trimmed);\n    if (!isNaN(serialNumber) && serialNumber > 0 && serialNumber < 100000) {\n      // Convert Excel serial to a JS Date that renders as LOCAL midnight.\n      // 1) Compute UTC midnight for the serial\n      const daysSinceUnixEpoch = serialNumber - 25569;\n      const msUtc = Math.round(daysSinceUnixEpoch * 86400000);\n      // 2) Apply the timezone offset at that point in time so that toString() shows local midnight\n      const tzAtDateMin = new Date(msUtc).getTimezoneOffset();\n      const msLocal = msUtc + tzAtDateMin * 60000;\n      return new Date(msLocal);\n    }\n  }\n\n  // ISO format -> rely on native\n  if (dateString.includes('T')) {\n    const d = new Date(dateString);\n    return isNaN(d.getTime()) ? null : d;\n  }\n\n  // Handle YYYY-MM-DD HH:MM:SS as local time\n  const ymdLocal = trimmed.match(/^(\\d{4})-(\\d{2})-(\\d{2})\\s+(\\d{2}):(\\d{2}):(\\d{2})$/);\n  if (ymdLocal) {\n    const [, y, m, d, hh, mm, ss] = ymdLocal;\n    return new Date(parseInt(y, 10), parseInt(m, 10) - 1, parseInt(d, 10), parseInt(hh, 10), parseInt(mm, 10), parseInt(ss, 10));\n  }\n\n  // Fallback\n  const date = new Date(dateString);\n  return isNaN(date.getTime()) ? null : date;\n}\n\n/**\n * Pulls time series data from Seeq sensors over a specified time range.\n * This is an array function that should be called on a range that can accommodate the output.\n * \n * @customfunction PULL\n * @param sensorNames Range containing sensor names (e.g., B1:D1)\n * @param startDatetime Start time for data pull (ISO format: \"2024-01-01T00:00:00\" or \"8/1/2025 0:00\")\n * @param endDatetime End time for data pull (ISO format: \"2024-01-31T23:59:59\" or \"8/3/2025 0:00\")\n * @param mode Data retrieval mode: \"grid\" for time-based intervals or \"points\" for number of points - defaults to \"points\"\n * @param modeValue Grid interval (e.g., \"15min\", \"1h\", \"1d\") when mode=\"grid\" OR number of points when mode=\"points\" - defaults to 1000\n * @returns Array containing timestamp column (as Excel serial numbers) and sensor data columns\n * \n * TIMEZONE BEHAVIOR:\n * - Input dates without timezone info are treated as local timezone\n * - Returned data timestamps are in the same timezone as the input (local timezone)\n * - This matches user expectations for natural date/time input\n */\nexport function PULL(\n  sensorNames: string[][],\n  startDatetime: string,\n  endDatetime: string,\n  mode: string = \"points\",\n  modeValue: string | number = 1000\n): string[][] {\n  try {\n    // Flatten the sensor names array and filter out empty cells\n    const sensorNamesList = sensorNames\n      .flat()\n      .filter(name => name && name.trim() !== \"\");\n    \n    if (sensorNamesList.length === 0) {\n      return [[\"Error: No sensor names provided\"]];\n    }\n    \n    // Validate datetime format and ensure consistent timezone handling\n    let startDate: Date;\n    let endDate: Date;\n    \n  // Parse dates using custom parser\n  startDate = parseDate(startDatetime);\n  endDate = parseDate(endDatetime);\n  \n  if (!startDate || !endDate) {\n    return [[\"Error: Invalid datetime format. Use formats like: 8/1/2025 0:00 or 2024-01-01T00:00:00\"]];\n  }\n  \n  // Calculate time range in seconds (needed for both modes)\n  const timeRangeMs = endDate.getTime() - startDate.getTime();\n  const timeRangeSeconds = Math.floor(timeRangeMs / 1000);\n    \n    if (startDate >= endDate) {\n      return [[\"Error: Start datetime must be before end datetime\"]];\n    }\n    \n    // Validate mode parameter\n    if (mode !== \"grid\" && mode !== \"points\") {\n      return [[\"Error: Mode must be 'grid' or 'points'\"]];\n    }\n    \n    \n    // Calculate grid based on mode\n    let grid: string;\n    if (mode === \"grid\") {\n      // Use modeValue as grid directly\n      grid = String(modeValue);\n      // Validate grid format\n      const gridPattern = /^(\\d+)(min|h|d|s)$/;\n      if (!gridPattern.test(grid)) {\n        return [[\"Error: Invalid grid format. Use format like '15min', '1h', '1d', '30s'\"]];\n      }\n    } else {\n      // mode === \"points\" - calculate grid from number of points\n      const numPoints = typeof modeValue === 'number' ? modeValue : parseInt(String(modeValue));\n      if (isNaN(numPoints) || numPoints <= 0) {\n        return [[\"Error: Number of points must be a positive integer\"]];\n      }\n      \n      // Calculate seconds per point (must be integer)\n      const secondsPerPoint = Math.floor(timeRangeSeconds / numPoints);\n      \n      if (secondsPerPoint < 1) {\n        return [\n          [\"Error: Time range too short for requested number of points. Try fewer points or a longer time range.\"]\n        ];\n      }\n      \n      // Convert to grid format\n      grid = `${secondsPerPoint}s`;\n    }\n\n        // Check if we have stored credentials\n    const authCredentials = getStoredCredentials();\n    if (!authCredentials) {\n      return [[\"Error: Not authenticated to Seeq. Please use the SqExcel taskpane to authenticate first.\"]];\n    }\n    \n    // Get user's timezone\n    const userTimezone = (function() {\n      try {\n        const tz = Intl.DateTimeFormat().resolvedOptions().timeZone;\n        return tz || 'UTC';\n      } catch (_e) {\n        return 'UTC';\n      }\n    })();\n    \n    // Call backend server with credentials\n    const result = callBackendSync('/api/seeq/sensor-data', {\n      sensorNames: sensorNamesList,\n      startDatetime,\n      endDatetime,\n      grid,\n      userTimezone,\n      url: authCredentials.url,\n      accessKey: authCredentials.accessKey,\n      password: authCredentials.password,\n      authProvider: \"Seeq\",\n      ignoreSslErrors: false\n    });\n    \n    if (result.success && result.data && result.data.length > 0) {\n      // Create header row with timestamp and sensor names\n      const headers = [\"Timestamp\"].concat(result.data_columns || []);\n      \n      // Create data rows with formatted timestamps\n      const dataRows = result.data.map((row: any) => {\n        const timestamp = row.Timestamp || row.index || \"N/A\";\n        // Convert timestamp to Excel serial number for best compatibility\n        const excelSerialTimestamp = convertToExcelSerialNumber(timestamp);\n        const values = (result.data_columns || []).map((col: string) => {\n          return row[col] !== undefined ? row[col] : \"N/A\";\n        });\n        return [excelSerialTimestamp].concat(values);\n      });\n      \n      \n      return [headers].concat(dataRows);\n    } else {\n      // Check if backend server is not running\n      if (result.error && result.error.includes('Failed to fetch') || result.error.includes('NetworkError')) {\n        return [\n          [\"Backend server not running\"],\n          [\"Please start the backend server:\"],\n          [\"1. Open terminal in the backend folder\"],\n          [\"2. Run: npm install && npm start\"],\n          [\"3. Then use this function again\"]\n        ];\n      }\n      \n      return [\n        [\"No data returned\"],\n        [\"Error: \" + (result.error || result.message || \"Unknown error\")],\n        [\"Sensors: \" + sensorNamesList.join(\", \")],\n        [\"Time Range: \" + startDatetime + \" to \" + endDatetime]\n      ];\n    }\n    \n  } catch (error) {\n    return [[\"Error: \" + (error instanceof Error ? error.message : 'Unknown error')]];\n  }\n}\n\n/**\n * Searches for sensors in Seeq without pulling data.\n * \n * @customfunction SEARCH_SENSORS\n * @param sensorNames Range containing sensor names (e.g., B1:D1)\n * @returns Array containing search results for each sensor\n */\nexport function SEARCH_SENSORS(sensorNames: string[][]): string[][] {\n  try {\n    // Flatten the sensor names array and filter out empty cells\n    const sensorNamesList = sensorNames\n      .flat()\n      .filter(name => name && name.trim() !== \"\");\n    \n    if (sensorNamesList.length === 0) {\n      return [[\"Error: No sensor names provided\"]];\n    }\n\n    // Check if we have stored credentials\n    const searchCredentials = getStoredCredentials();\n    if (!searchCredentials) {\n      return [[\"Error: Not authenticated to Seeq. Please use the SqExcel taskpane to authenticate first.\"]];\n    }\n    \n    // Call backend server with credentials\n    const result = callBackendSync('/api/seeq/search-sensors', {\n      sensorNames: sensorNamesList,\n      url: searchCredentials.url,\n      accessKey: searchCredentials.accessKey,\n      password: searchCredentials.password,\n      authProvider: \"Seeq\",\n      ignoreSslErrors: false\n    });\n    \n    if (result.success && result.search_results && result.search_results.length > 0) {\n      // Create header row\n      const headers = [\"Name\", \"ID\", \"Datasource Name\", \"Value Unit Of Measure\", \"Description\"];\n      \n      // Create data rows\n      const dataRows = result.search_results.map((sensor: any) => {\n        return [\n          sensor[\"Name\"] || \"N/A\",\n          sensor[\"ID\"] || \"Not Found\",\n          sensor[\"Datasource Name\"] || \"N/A\",\n          sensor[\"Value Unit Of Measure\"] || \"N/A\",\n          sensor[\"Description\"] || \"N/A\"\n        ];\n      });\n      \n      return [headers].concat(dataRows);\n    } else {\n      // Check if backend server is not running\n      if (result.error && result.error.includes('Failed to fetch') || result.error.includes('NetworkError')) {\n        return [\n          [\"Backend server not running\"]\n        ];\n      }\n      \n      return [\n        [\"No search results returned\"],\n        [\"Error: \" + (result.error || result.message || \"Unknown error\")],\n        [\"Sensors: \" + sensorNamesList.join(\", \")]\n      ];\n    }\n    \n  } catch (error) {\n    return [[\"Error: \" + (error instanceof Error ? error.message : 'Unknown error')]];\n  }\n}\n\n/**\n * Timestamp diagnostics helper exposed to Excel for debugging timezone issues.\n * Place =DEBUG(A1) or =DEBUG(\"8/1/2025 00:00\") in a cell to see details.\n *\n * @customfunction DEBUG\n * @param input Timestamp string or serial to diagnose\n * @returns 2D table of key/value diagnostics\n */\nexport function DEBUG(input: string): string[][] {\n  try {\n    const rows: string[][] = [];\n    const now = new Date();\n    const tzOffsetMin = now.getTimezoneOffset();\n    const tzName = (() => {\n      try { return Intl.DateTimeFormat().resolvedOptions().timeZone || 'Unknown'; } catch (_e) { return 'Unknown'; }\n    })();\n\n    rows.push([\"Input\", String(input)]);\n    rows.push([\"Timezone name\", tzName]);\n    rows.push([\"Timezone offset (min)\", String(tzOffsetMin)]);\n\n    // Parse using native Date first, but skip for numeric Excel serial strings to avoid misleading year=45870\n    let nativeDate: Date | null = null;\n    const isNumericString = typeof input === 'string' && /^\\d+(?:\\.\\d+)?$/.test(input.trim());\n    const numericVal = isNumericString ? parseFloat(input.trim()) : NaN;\n    const looksLikeExcelSerial = isNumericString && !isNaN(numericVal) && numericVal > 0 && numericVal < 100000;\n    if (!looksLikeExcelSerial) {\n      const nd = new Date(input as any);\n      nativeDate = isNaN(nd.getTime()) ? null : nd;\n      rows.push([\"Native parse valid\", String(!!nativeDate)]);\n      rows.push([\"Native local\", !nativeDate ? \"Invalid\" : nativeDate.toString()]);\n      rows.push([\"Native UTC ISO\", !nativeDate ? \"Invalid\" : nativeDate.toISOString()]);\n      rows.push([\"Native getTime()\", !nativeDate ? \"Invalid\" : String(nativeDate.getTime())]);\n    } else {\n      rows.push([\"Native parse valid\", \"Skipped (numeric Excel serial)\"]);\n      rows.push([\"Native local\", \"Skipped (numeric Excel serial)\"]); \n      rows.push([\"Native UTC ISO\", \"Skipped (numeric Excel serial)\"]); \n      rows.push([\"Native getTime()\", \"Skipped (numeric Excel serial)\"]); \n    }\n\n    // Parse using custom parser\n    const customDate = parseDate(String(input));\n    rows.push([\"Custom parse valid\", String(!!customDate && !isNaN(customDate.getTime()))]);\n    rows.push([\"Custom local\", !customDate ? \"Invalid\" : customDate.toString()]);\n    rows.push([\"Custom UTC ISO\", !customDate ? \"Invalid\" : customDate.toISOString()]);\n    rows.push([\"Custom getTime()\", !customDate ? \"Invalid\" : String(customDate.getTime())]);\n\n    // Excel serial using our converter\n    const serialFromInput = convertToExcelSerialNumber(input);\n    rows.push([\"Serial (convertToExcelSerialNumber(input))\", String(serialFromInput)]);\n\n    if (customDate && !isNaN(customDate.getTime())) {\n      const serialFromCustom = convertToExcelSerialNumber(customDate);\n      rows.push([\"Serial (convertToExcelSerialNumber(customDate))\", String(serialFromCustom)]);\n\n      // Show effect of subtracting vs adding the timezone offset (in ms)\n      const tzAtCustomMin = customDate.getTimezoneOffset();\n      const offsetMs = tzAtCustomMin * 60 * 1000;\n      const minusOffset = new Date(customDate.getTime() - offsetMs);\n      const plusOffset = new Date(customDate.getTime() + offsetMs);\n      rows.push([\"Custom minus offset local\", minusOffset.toString()]);\n      rows.push([\"Custom minus offset UTC ISO\", minusOffset.toISOString()]);\n      rows.push([\"Custom plus offset local\", plusOffset.toString()]);\n      rows.push([\"Custom plus offset UTC ISO\", plusOffset.toISOString()]);\n      rows.push([\"Serial (custom minus offset)\", String(convertToExcelSerialNumber(minusOffset))]);\n      rows.push([\"Serial (custom plus offset)\", String(convertToExcelSerialNumber(plusOffset))]);\n\n      // Also include a line that shows the Excel local midnight interpretation for numeric serials\n      if (looksLikeExcelSerial) {\n        rows.push([\"Excel local midnight\", customDate.toString()]);\n      }\n    }\n\n    return [[\"Key\", \"Value\"], ...rows];\n  } catch (e) {\n    return [[\"Error\", e instanceof Error ? e.message : \"Unknown error\"]];\n  }\n}\n\nCustomFunctions.associate(\"PULL\", PULL);\nCustomFunctions.associate(\"SEARCH_SENSORS\", SEARCH_SENSORS);\nCustomFunctions.associate(\"DEBUG\", DEBUG);"],"names":["__webpack_require__","d","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","BACKEND_URL","getStoredCredentials","saved","localStorage","getItem","credentials","JSON","parse","savedTime","Date","timestamp","getTime","removeItem","error","callBackendSync","endpoint","data","arguments","length","undefined","xhr","XMLHttpRequest","url","concat","open","setRequestHeader","send","stringify","status","success","statusText","responseText","e","message","rawResponse","Error","details","stack","convertToExcelSerialNumber","date","test","trim","asNum","parseFloat","isNaN","localMatch","match","_localMatch","_slicedToArray","y","m","hh","mm","ss","parseInt","parsed","parseDate","nd","tzOffsetMin","getTimezoneOffset","_err","dateString","trimmed","serialNumber","daysSinceUnixEpoch","msUtc","Math","round","tzAtDateMin","includes","ymdLocal","_ymdLocal","CustomFunctions","associate","sensorNames","startDatetime","endDatetime","mode","modeValue","startDate","endDate","sensorNamesList","flat","filter","name","grid","timeRangeMs","timeRangeSeconds","floor","String","numPoints","secondsPerPoint","authCredentials","result","userTimezone","Intl","DateTimeFormat","resolvedOptions","timeZone","_e","accessKey","password","authProvider","ignoreSslErrors","headers","data_columns","dataRows","map","row","excelSerialTimestamp","Timestamp","index","values","col","join","searchCredentials","search_results","sensor","input","rows","tzName","push","nativeDate","isNumericString","numericVal","NaN","looksLikeExcelSerial","toString","toISOString","customDate","serialFromInput","serialFromCustom","offsetMs","minusOffset","plusOffset"],"sourceRoot":""}