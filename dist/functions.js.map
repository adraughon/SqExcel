{"version":3,"file":"functions.js","mappings":"yBACA,IC0CMA,EAAc,iCAKpB,SAASC,IACP,IAEE,IAAMC,EAAQC,aAAaC,QAAQ,oBACnC,GAAIF,EAAO,CACT,IAAMG,EAAcC,KAAKC,MAAML,GAGzBM,EAAY,IAAIC,KAAKJ,EAAYK,WAIvC,KAHY,IAAID,MACOE,UAAYH,EAAUG,WAAa,KAE1C,GACd,OAAON,EAGPF,aAAaS,WAAW,mBAE5B,CACA,OAAO,IACT,CAAE,MAAOC,GACP,OAAO,IACT,CACF,CAMA,SAASC,EAAgBC,GAAyC,IAAvBC,EAASC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,KACrD,IACE,IAAMG,EAAM,IAAIC,eACVC,EAAM,GAAHC,OAAMvB,GAAWuB,OAAGR,GAe7B,GAXAK,EAAII,KAAKR,EAAO,OAAS,MAAOM,GAAK,GACrCF,EAAIK,iBAAiB,eAAgB,oBAGjCT,EACFI,EAAIM,KAAKpB,KAAKqB,UAAUX,IAExBI,EAAIM,OAIa,MAAfN,EAAIQ,OAYN,MAAO,CACLC,SAAS,EACThB,MAAO,QAAFU,OAAUH,EAAIQ,OAAM,MAAAL,OAAKH,EAAIU,YAClCC,aAAcX,EAAIW,aAClBT,IAAKA,GAfP,IAEE,OADehB,KAAKC,MAAMa,EAAIW,aAEhC,CAAE,MAAOC,GACP,MAAO,CACLH,SAAS,EACThB,MAAO,6BAAFU,OAAgCS,EAAYC,SACjDC,YAAad,EAAIW,aAErB,CASJ,CAAE,MAAOlB,GACP,MAAO,CACLgB,SAAS,EACThB,MAAO,2BAAFU,OAA6BV,aAAiBsB,MAAQtB,EAAMoB,QAAU,iBAC3EG,QAASvB,aAAiBsB,MAAQtB,EAAMwB,MAAQ,iBAChDf,IAAK,GAAFC,OAAKvB,GAAWuB,OAAGR,GAE1B,CACF,CAmRAuB,gBAAgBC,UAAU,OAtNnB,SACLC,EACAC,EACAC,GAGY,IAFZC,EAAY1B,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,SACf2B,EAA0B3B,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,IAE7B,IAEE,IASI4B,EACAC,EAyBAC,EAnCEC,EAAkBR,EACrBS,OACAC,OAAO,SAAAC,GAAI,OAAIA,GAAwB,KAAhBA,EAAKC,MAAa,GAE5C,GAA+B,IAA3BJ,EAAgB9B,OAClB,MAAO,CAAC,CAAC,oCAQX,IAEE2B,EAAY,IAAIpC,KAAKgC,GACrBK,EAAU,IAAIrC,KAAKiC,EACrB,CAAE,MAAOV,GACP,MAAO,CAAC,CAAC,uEACX,CAEA,GAAIqB,MAAMR,EAAUlC,YAAc0C,MAAMP,EAAQnC,WAC9C,MAAO,CAAC,CAAC,wEAGX,GAAIkC,GAAaC,EACf,MAAO,CAAC,CAAC,sDAIX,GAAa,SAATH,GAA4B,WAATA,EACrB,MAAO,CAAC,CAAC,2CAKX,GAAa,SAATA,GAKF,GAHAI,EAAOO,OAAOV,IAEM,qBACHW,KAAKR,GACpB,MAAO,CAAC,CAAC,+EAEN,CAEL,IAAMS,EAAiC,iBAAdZ,EAAyBA,EAAYa,SAASH,OAAOV,IAC9E,GAAIS,MAAMG,IAAcA,GAAa,EACnC,MAAO,CAAC,CAAC,uDAIb,IAAME,EAAcZ,EAAQnC,UAAYkC,EAAUlC,UAC5CgD,EAAmBC,KAAKC,MAAMH,EAAc,KAG1CI,EAAkBF,KAAKC,MAAMF,EAAmBH,GAEtD,GAAIM,EAAkB,EACpB,MAAO,CACL,CAAC,wGACD,CAAC,sBAADvC,OAAuBoC,EAAgB,OAAApC,QAAOoC,EAAiB,MAAMI,QAAQ,GAAE,gBAAAxC,OAAeiC,IAC9F,CAAC,iBAADjC,OAAkBsB,EAAUmB,cAAa,WAAAzC,OAAUuB,EAAQkB,iBAK/DjB,EAAO,GAAHxB,OAAMuC,EAAe,IAC3B,CAGA,IAAMG,EAAkBhE,IACxB,IAAKgE,EACH,MAAO,CAAC,CAAC,6FAIX,IAAMC,EAASpD,EAAgB,wBAAyB,CACtD0B,YAAaQ,EACbP,cAAAA,EACAC,YAAAA,EACAK,KAAAA,EACAzB,IAAK2C,EAAgB3C,IACrB6C,UAAWF,EAAgBE,UAC3BC,SAAUH,EAAgBG,SAC1BC,aAAc,OACdC,iBAAiB,IAGnB,GAAIJ,EAAOrC,SAAWqC,EAAOlD,MAAQkD,EAAOlD,KAAKE,OAAS,EAAG,CAE3D,IAAMqD,EAAU,CAAC,aAAahD,OAAO2C,EAAOM,cAAgB,IAGtDC,EAAWP,EAAOlD,KAAK0D,IAAI,SAACC,GAChC,IAEMC,EAzJd,SAAoClE,GAClC,IAEE,IAAImE,EAEJ,GAAyB,iBAAdnE,EAETmE,EAAO,IAAIpE,KAAKC,QACX,GAAIA,aAAqBD,KAC9BoE,EAAOnE,MACF,IAAyB,iBAAdA,EAKhB,OAAO,EAHPmE,EAAO,IAAIpE,KAAKC,EAIlB,CAGA,OAAI2C,MAAMwB,EAAKlE,WACN,EAMYkE,EAAKlE,UAAY,MAAyB,KAGjE,CAAE,MAAOE,GAEP,OAAO,CACT,CACF,CAwHqCiE,CAFXH,EAAII,WAAaJ,EAAIK,OAAS,OAG1CC,GAAUf,EAAOM,cAAgB,IAAIE,IAAI,SAACQ,GAC9C,YAAoB/D,IAAbwD,EAAIO,GAAqBP,EAAIO,GAAO,KAC7C,GACA,MAAO,CAACN,GAAsBrD,OAAO0D,EACvC,GAOA,OAJIR,EAASvD,OAAS,IACpBuD,EAAS,GAAG,GAAK,eAAHlD,OAAkBwB,EAAI,aAAAxB,OAAYqB,EAAS,kBAAArB,OAAiBkD,EAASvD,OAAM,gBAAAK,OAAeoC,iBAAgB,MAGnH,CAACY,GAAShD,OAAOkD,EAC1B,CAEE,OAAIP,EAAOrD,OAASqD,EAAOrD,MAAMsE,SAAS,oBAAsBjB,EAAOrD,MAAMsE,SAAS,gBAC7E,CACL,CAAC,8BACD,CAAC,oCACD,CAAC,0CACD,CAAC,oCACD,CAAC,oCAIE,CACL,CAAC,oBACD,CAAC,WAAajB,EAAOrD,OAASqD,EAAOjC,SAAW,kBAChD,CAAC,YAAce,EAAgBoC,KAAK,OACpC,CAAC,eAAiB3C,EAAgB,OAASC,GAIjD,CAAE,MAAO7B,GACP,MAAO,CAAC,CAAC,WAAaA,aAAiBsB,MAAQtB,EAAMoB,QAAU,kBACjE,CACF,GAyEAK,gBAAgBC,UAAU,iBAhEnB,SAAwBC,GAC7B,IAEE,IAAMQ,EAAkBR,EACrBS,OACAC,OAAO,SAAAC,GAAI,OAAIA,GAAwB,KAAhBA,EAAKC,MAAa,GAE5C,GAA+B,IAA3BJ,EAAgB9B,OAClB,MAAO,CAAC,CAAC,oCAIX,IAAMmE,EAAoBpF,IAC1B,IAAKoF,EACH,MAAO,CAAC,CAAC,6FAIX,IAAMnB,EAASpD,EAAgB,2BAA4B,CACzD0B,YAAaQ,EACb1B,IAAK+D,EAAkB/D,IACvB6C,UAAWkB,EAAkBlB,UAC7BC,SAAUiB,EAAkBjB,SAC5BC,aAAc,OACdC,iBAAiB,IAGnB,GAAIJ,EAAOrC,SAAWqC,EAAOoB,gBAAkBpB,EAAOoB,eAAepE,OAAS,EAAG,CAE/E,IAGMuD,EAAWP,EAAOoB,eAAeZ,IAAI,SAACa,GAC1C,MAAO,CACLA,EAAa,MAAK,MAClBA,EAAW,IAAK,YAChBA,EAAO,oBAAsB,MAC7BA,EAAO,0BAA4B,MACnCA,EAAoB,aAAK,MAE7B,GAEA,MAAO,CAbS,CAAC,OAAQ,KAAM,kBAAmB,wBAAyB,gBAa1DhE,OAAOkD,EAC1B,CAEE,OAAIP,EAAOrD,OAASqD,EAAOrD,MAAMsE,SAAS,oBAAsBjB,EAAOrD,MAAMsE,SAAS,gBAC7E,CACL,CAAC,+BAIE,CACL,CAAC,8BACD,CAAC,WAAajB,EAAOrD,OAASqD,EAAOjC,SAAW,kBAChD,CAAC,YAAce,EAAgBoC,KAAK,OAI1C,CAAE,MAAOvE,GACP,MAAO,CAAC,CAAC,WAAaA,aAAiBsB,MAAQtB,EAAMoB,QAAU,kBACjE,CACF,E","sources":["webpack://excel-custom-functions/webpack/bootstrap","webpack://excel-custom-functions/./src/functions/functions.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global clearInterval, console, CustomFunctions, setInterval, XMLHttpRequest */\n\n/**\n * SqExcel Custom Functions\n * \n * This add-in provides 2 Excel functions for working with Seeq data:\n * - SEARCH_SENSORS: Search for sensors in your Seeq environment\n * - PULL: Pull time series data from Seeq sensors\n * \n * SETUP INSTRUCTIONS:\n * 1. Create a Seeq Access Key:\n *    - Go to your Seeq environment\n *    - Click on your username in the top right\n *    - Select \"Create Access Key\"\n *    - Copy both the Key (ID) and Password - you'll need both!\n * \n * 2. Authenticate in Excel:\n *    - Open the SqExcel taskpane (if not visible, go to Insert > My Add-ins)\n *    - Enter your Seeq server URL (e.g., https://your-server.seeq.tech)\n *    - Enter the Access Key and Password from step 1\n *    - Click \"Authenticate\"\n *    - Once authenticated, you can use the Excel functions below\n * \n * 3. Using the Functions:\n *    - SEARCH_SENSORS: =SEARCH_SENSORS(A1:C1) where A1:C1 contains sensor names\n *    - PULL: =PULL(A1:C1,\"2024-01-01T00:00:00\",\"2024-01-31T23:59:59) - defaults to 1000 points\n *    - PULL with grid: =PULL(A1:C1,\"2024-01-01T00:00:00\",\"2024-01-31T23:59:59\",\"grid\",\"15min\")\n *    - PULL with points: =PULL(A1:C1,\"2024-01-01T00:00:00\",\"2024-01-31T23:59:59,\"points\",500)\n * \n * TROUBLESHOOTING:\n * - If you see \"#NAME?\" errors, make sure the add-in is properly loaded\n * - If authentication fails, check your Seeq server URL and credentials\n * - If data doesn't load, verify your sensor names exist in Seeq\n * - For detailed diagnostics, run a connection test in the taskpane\n */\n\n\n// Backend server configuration\nconst BACKEND_URL = 'https://sqexcel.up.railway.app';\n\n/**\n * Helper function to get stored Seeq credentials from localStorage\n */\nfunction getStoredCredentials(): any {\n  try {\n    // Get credentials from localStorage (same storage used by taskpane)\n    const saved = localStorage.getItem(\"seeq_credentials\");\n    if (saved) {\n      const credentials = JSON.parse(saved);\n      \n      // Check if credentials are still valid (not expired)\n      const savedTime = new Date(credentials.timestamp);\n      const now = new Date();\n      const hoursDiff = (now.getTime() - savedTime.getTime()) / (1000 * 60 * 60);\n      \n      if (hoursDiff < 24) { // Credentials valid for 24 hours\n        return credentials;\n      } else {\n        // Credentials expired, remove them\n        localStorage.removeItem(\"seeq_credentials\");\n      }\n    }\n    return null;\n  } catch (error) {\n    return null;\n  }\n}\n\n/**\n * Helper function to make synchronous HTTP requests to the backend server\n * Note: This uses XMLHttpRequest synchronously, which is deprecated but works in Excel custom functions\n */\nfunction callBackendSync(endpoint: string, data: any = null): any {\n  try {\n    const xhr = new XMLHttpRequest();\n    const url = `${BACKEND_URL}${endpoint}`;\n    \n    \n    // Use synchronous request (deprecated but works in Excel custom functions)\n    xhr.open(data ? 'POST' : 'GET', url, false);\n    xhr.setRequestHeader('Content-Type', 'application/json');\n    \n    \n    if (data) {\n      xhr.send(JSON.stringify(data));\n    } else {\n      xhr.send();\n    }\n    \n    \n    if (xhr.status === 200) {\n      try {\n        const parsed = JSON.parse(xhr.responseText);\n        return parsed;\n      } catch (e) {\n        return {\n          success: false,\n          error: `Failed to parse response: ${(e as Error).message}`,\n          rawResponse: xhr.responseText\n        };\n      }\n    } else {\n      return {\n        success: false,\n        error: `HTTP ${xhr.status}: ${xhr.statusText}`,\n        responseText: xhr.responseText,\n        url: url\n      };\n    }\n  } catch (error) {\n    return {\n      success: false,\n      error: `Backend request failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      details: error instanceof Error ? error.stack : 'No stack trace',\n      url: `${BACKEND_URL}${endpoint}`\n    };\n  }\n}\n\n\n/**\n * Helper function to convert timestamps to Excel serial numbers\n * Returns Excel's internal date representation for better compatibility\n * Excel serial number = (JS timestamp / (1000 * 60 * 60 * 24)) + 25569\n * \n * Note: These serial numbers will display as large numbers (e.g., 45870.0)\n * To see them as readable dates, users should:\n * 1. Select the timestamp column\n * 2. Right-click → Format Cells → Date\n * 3. Choose desired date format (e.g., \"3/14/12 1:30 PM\")\n */\nfunction convertToExcelSerialNumber(timestamp: any): number {\n  try {\n    // Handle different timestamp formats that might come from the backend\n    let date: Date;\n    \n    if (typeof timestamp === 'string') {\n      // Try to parse ISO string or other date formats\n      date = new Date(timestamp);\n    } else if (timestamp instanceof Date) {\n      date = timestamp;\n    } else if (typeof timestamp === 'number') {\n      // Handle Unix timestamp\n      date = new Date(timestamp);\n    } else {\n      // Fallback for unknown formats\n      return 0; // Return 0 for invalid dates\n    }\n    \n    // Check if date is valid\n    if (isNaN(date.getTime())) {\n      return 0; // Return 0 for invalid dates\n    }\n    \n    // Convert to Excel serial number\n    // Excel serial number = (JS timestamp / (1000 * 60 * 60 * 24)) + 25569\n    // Where 25569 is the number of days between 1900-01-01 and 1970-01-01\n    const excelSerial = (date.getTime() / (1000 * 60 * 60 * 24)) + 25569;\n    \n    return excelSerial;\n  } catch (error) {\n    // If any error occurs during conversion, return 0\n    return 0;\n  }\n}\n\n/**\n * Pulls time series data from Seeq sensors over a specified time range.\n * This is an array function that should be called on a range that can accommodate the output.\n * \n * @customfunction PULL\n * @param sensorNames Range containing sensor names (e.g., B1:D1)\n * @param startDatetime Start time for data pull (ISO format: \"2024-01-01T00:00:00\")\n * @param endDatetime End time for data pull (ISO format: \"2024-01-31T23:59:59\")\n * @param mode Data retrieval mode: \"grid\" for time-based intervals or \"points\" for number of points - defaults to \"points\"\n * @param modeValue Grid interval (e.g., \"15min\", \"1h\", \"1d\") when mode=\"grid\" OR number of points when mode=\"points\" - defaults to 1000\n * @returns Array containing timestamp column (as Excel serial numbers) and sensor data columns\n */\nexport function PULL(\n  sensorNames: string[][],\n  startDatetime: string,\n  endDatetime: string,\n  mode: string = \"points\",\n  modeValue: string | number = 1000\n): string[][] {\n  try {\n    // Flatten the sensor names array and filter out empty cells\n    const sensorNamesList = sensorNames\n      .flat()\n      .filter(name => name && name.trim() !== \"\");\n    \n    if (sensorNamesList.length === 0) {\n      return [[\"Error: No sensor names provided\"]];\n    }\n    \n    // Validate datetime format and ensure consistent timezone handling\n    let startDate: Date;\n    let endDate: Date;\n    \n    // Try to parse dates consistently\n    try {\n      // Parse dates as local time\n      startDate = new Date(startDatetime);\n      endDate = new Date(endDatetime);\n    } catch (e) {\n      return [[\"Error: Invalid datetime format. Use ISO format: YYYY-MM-DDTHH:MM:SS\"]];\n    }\n    \n    if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {\n      return [[\"Error: Invalid datetime format. Use ISO format: YYYY-MM-DDTHH:MM:SS\"]];\n    }\n    \n    if (startDate >= endDate) {\n      return [[\"Error: Start datetime must be before end datetime\"]];\n    }\n    \n    // Validate mode parameter\n    if (mode !== \"grid\" && mode !== \"points\") {\n      return [[\"Error: Mode must be 'grid' or 'points'\"]];\n    }\n    \n    // Calculate grid based on mode\n    let grid: string;\n    if (mode === \"grid\") {\n      // Use modeValue as grid directly\n      grid = String(modeValue);\n      // Validate grid format\n      const gridPattern = /^(\\d+)(min|h|d|s)$/;\n      if (!gridPattern.test(grid)) {\n        return [[\"Error: Invalid grid format. Use format like '15min', '1h', '1d', '30s'\"]];\n      }\n    } else {\n      // mode === \"points\" - calculate grid from number of points\n      const numPoints = typeof modeValue === 'number' ? modeValue : parseInt(String(modeValue));\n      if (isNaN(numPoints) || numPoints <= 0) {\n        return [[\"Error: Number of points must be a positive integer\"]];\n      }\n      \n    // Calculate time range in seconds\n    const timeRangeMs = endDate.getTime() - startDate.getTime();\n    const timeRangeSeconds = Math.floor(timeRangeMs / 1000);\n      \n      // Calculate seconds per point (must be integer)\n      const secondsPerPoint = Math.floor(timeRangeSeconds / numPoints);\n      \n      if (secondsPerPoint < 1) {\n        return [\n          [\"Error: Time range too short for requested number of points. Try fewer points or a longer time range.\"],\n          [`Debug: Time range: ${timeRangeSeconds}s (${(timeRangeSeconds/3600).toFixed(2)}h), Points: ${numPoints}`],\n          [`Debug: Start: ${startDate.toISOString()}, End: ${endDate.toISOString()}`]\n        ];\n      }\n      \n      // Convert to grid format\n      grid = `${secondsPerPoint}s`;\n    }\n\n        // Check if we have stored credentials\n    const authCredentials = getStoredCredentials();\n    if (!authCredentials) {\n      return [[\"Error: Not authenticated to Seeq. Please use the SqExcel taskpane to authenticate first.\"]];\n    }\n    \n    // Call backend server with credentials\n    const result = callBackendSync('/api/seeq/sensor-data', {\n      sensorNames: sensorNamesList,\n      startDatetime,\n      endDatetime,\n      grid,\n      url: authCredentials.url,\n      accessKey: authCredentials.accessKey,\n      password: authCredentials.password,\n      authProvider: \"Seeq\",\n      ignoreSslErrors: false\n    });\n    \n    if (result.success && result.data && result.data.length > 0) {\n      // Create header row with timestamp and sensor names\n      const headers = [\"Timestamp\"].concat(result.data_columns || []);\n      \n      // Create data rows with formatted timestamps\n      const dataRows = result.data.map((row: any) => {\n        const timestamp = row.Timestamp || row.index || \"N/A\";\n        // Convert timestamp to Excel serial number for best compatibility\n        const excelSerialTimestamp = convertToExcelSerialNumber(timestamp);\n        const values = (result.data_columns || []).map((col: string) => {\n          return row[col] !== undefined ? row[col] : \"N/A\";\n        });\n        return [excelSerialTimestamp].concat(values);\n      });\n      \n      // Add debug info as the first cell of the first data row\n      if (dataRows.length > 0) {\n        dataRows[0][0] = `Debug: Grid=${grid}, Points=${modeValue}, Actual rows=${dataRows.length}, TimeRange=${timeRangeSeconds}s`;\n      }\n      \n      return [headers].concat(dataRows);\n    } else {\n      // Check if backend server is not running\n      if (result.error && result.error.includes('Failed to fetch') || result.error.includes('NetworkError')) {\n        return [\n          [\"Backend server not running\"],\n          [\"Please start the backend server:\"],\n          [\"1. Open terminal in the backend folder\"],\n          [\"2. Run: npm install && npm start\"],\n          [\"3. Then use this function again\"]\n        ];\n      }\n      \n      return [\n        [\"No data returned\"],\n        [\"Error: \" + (result.error || result.message || \"Unknown error\")],\n        [\"Sensors: \" + sensorNamesList.join(\", \")],\n        [\"Time Range: \" + startDatetime + \" to \" + endDatetime]\n      ];\n    }\n    \n  } catch (error) {\n    return [[\"Error: \" + (error instanceof Error ? error.message : 'Unknown error')]];\n  }\n}\n\n/**\n * Searches for sensors in Seeq without pulling data.\n * \n * @customfunction SEARCH_SENSORS\n * @param sensorNames Range containing sensor names (e.g., B1:D1)\n * @returns Array containing search results for each sensor\n */\nexport function SEARCH_SENSORS(sensorNames: string[][]): string[][] {\n  try {\n    // Flatten the sensor names array and filter out empty cells\n    const sensorNamesList = sensorNames\n      .flat()\n      .filter(name => name && name.trim() !== \"\");\n    \n    if (sensorNamesList.length === 0) {\n      return [[\"Error: No sensor names provided\"]];\n    }\n\n    // Check if we have stored credentials\n    const searchCredentials = getStoredCredentials();\n    if (!searchCredentials) {\n      return [[\"Error: Not authenticated to Seeq. Please use the SqExcel taskpane to authenticate first.\"]];\n    }\n    \n    // Call backend server with credentials\n    const result = callBackendSync('/api/seeq/search-sensors', {\n      sensorNames: sensorNamesList,\n      url: searchCredentials.url,\n      accessKey: searchCredentials.accessKey,\n      password: searchCredentials.password,\n      authProvider: \"Seeq\",\n      ignoreSslErrors: false\n    });\n    \n    if (result.success && result.search_results && result.search_results.length > 0) {\n      // Create header row\n      const headers = [\"Name\", \"ID\", \"Datasource Name\", \"Value Unit Of Measure\", \"Description\"];\n      \n      // Create data rows\n      const dataRows = result.search_results.map((sensor: any) => {\n        return [\n          sensor[\"Name\"] || \"N/A\",\n          sensor[\"ID\"] || \"Not Found\",\n          sensor[\"Datasource Name\"] || \"N/A\",\n          sensor[\"Value Unit Of Measure\"] || \"N/A\",\n          sensor[\"Description\"] || \"N/A\"\n        ];\n      });\n      \n      return [headers].concat(dataRows);\n    } else {\n      // Check if backend server is not running\n      if (result.error && result.error.includes('Failed to fetch') || result.error.includes('NetworkError')) {\n        return [\n          [\"Backend server not running\"]\n        ];\n      }\n      \n      return [\n        [\"No search results returned\"],\n        [\"Error: \" + (result.error || result.message || \"Unknown error\")],\n        [\"Sensors: \" + sensorNamesList.join(\", \")]\n      ];\n    }\n    \n  } catch (error) {\n    return [[\"Error: \" + (error instanceof Error ? error.message : 'Unknown error')]];\n  }\n}\n\nCustomFunctions.associate(\"PULL\", PULL);\nCustomFunctions.associate(\"SEARCH_SENSORS\", SEARCH_SENSORS);"],"names":["BACKEND_URL","getStoredCredentials","saved","localStorage","getItem","credentials","JSON","parse","savedTime","Date","timestamp","getTime","removeItem","error","callBackendSync","endpoint","data","arguments","length","undefined","xhr","XMLHttpRequest","url","concat","open","setRequestHeader","send","stringify","status","success","statusText","responseText","e","message","rawResponse","Error","details","stack","CustomFunctions","associate","sensorNames","startDatetime","endDatetime","mode","modeValue","startDate","endDate","grid","sensorNamesList","flat","filter","name","trim","isNaN","String","test","numPoints","parseInt","timeRangeMs","timeRangeSeconds","Math","floor","secondsPerPoint","toFixed","toISOString","authCredentials","result","accessKey","password","authProvider","ignoreSslErrors","headers","data_columns","dataRows","map","row","excelSerialTimestamp","date","convertToExcelSerialNumber","Timestamp","index","values","col","includes","join","searchCredentials","search_results","sensor"],"sourceRoot":""}