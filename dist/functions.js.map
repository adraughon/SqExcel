{"version":3,"file":"functions.js","mappings":"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","sources":["webpack://excel-custom-functions/webpack/bootstrap","webpack://excel-custom-functions/./src/functions/functions.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global clearInterval, console, CustomFunctions, setInterval, XMLHttpRequest */\n\n/**\n * SqExcel Custom Functions\n * \n * IMPORTANT: Authentication with Seeq should be done through the SqExcel taskpane, NOT through Excel functions.\n * The SEEQ_AUTH, SEEQ_AUTH_STATUS, and SEEQ_REAUTH functions are disabled and will show instructions\n * to use the taskpane instead.\n * \n * To authenticate:\n * 1. Open the SqExcel taskpane\n * 2. Enter your Seeq server URL, access key, and password\n * 3. Click \"Authenticate\"\n * 4. Once authenticated, you can use SEEQ_SENSOR_DATA and other functions\n */\n\n/**\n * Adds two numbers.\n * @customfunction\n * @param first First number\n * @param second Second number\n * @returns The sum of the two numbers.\n */\nexport function add(first: number, second: number): number {\n  return first + second;\n}\n\n/**\n * Displays the current time once a second.\n * @customfunction\n * @param invocation Custom function handler\n */\nexport function clock(invocation: CustomFunctions.StreamingInvocation<string>): void {\n  const timer = setInterval(() => {\n    const time = currentTime();\n    invocation.setResult(time);\n  }, 1000);\n\n  invocation.onCanceled = () => {\n    clearInterval(timer);\n  };\n}\n\n/**\n * Returns the current time.\n * @returns String with the current time formatted for the current locale.\n */\nexport function currentTime(): string {\n  return new Date().toLocaleTimeString();\n}\n\n/**\n * Increments a value once a second.\n * @customfunction\n * @param incrementBy Amount to increment\n * @param invocation Custom function handler\n */\nexport function increment(\n  incrementBy: number,\n  invocation: CustomFunctions.StreamingInvocation<number>\n): void {\n  let result = 0;\n  const timer = setInterval(() => {\n    result += incrementBy;\n    invocation.setResult(result);\n  }, 1000);\n\n  invocation.onCanceled = () => {\n    clearInterval(timer);\n  };\n}\n\n/**\n * Writes a message to console.log().\n * @customfunction LOG\n * @param message String to write.\n * @returns String to write.\n */\nexport function logMessage(message: string): string {\n  console.log(message);\n\n  return message;\n}\n\n// Backend server configuration\nconst BACKEND_URL = 'https://localhost:3000';\n\n/**\n * Helper function to get stored Seeq credentials from the backend\n */\nfunction getStoredCredentials(): any {\n  try {\n    // Get credentials from the backend server\n    const result = callBackendSync('/api/seeq/credentials');\n    \n    if (result.success && result.credentials) {\n      const credentials = result.credentials;\n      // Check if credentials are still valid (not expired)\n      const savedTime = new Date(credentials.timestamp);\n      const now = new Date();\n      const hoursDiff = (now.getTime() - savedTime.getTime()) / (1000 * 60 * 60);\n      \n      if (hoursDiff < 24) { // Credentials valid for 24 hours\n        return credentials;\n      }\n    }\n    return null;\n  } catch (error) {\n    console.log(\"Could not get stored credentials from backend:\", error);\n    return null;\n  }\n}\n\n/**\n * Helper function to make synchronous HTTP requests to the backend server\n * Note: This uses XMLHttpRequest synchronously, which is deprecated but works in Excel custom functions\n */\nfunction callBackendSync(endpoint: string, data: any = null): any {\n  try {\n    const xhr = new XMLHttpRequest();\n    const url = `${BACKEND_URL}${endpoint}`;\n    \n    console.log(`[DEBUG] Attempting to connect to: ${url}`);\n    console.log(`[DEBUG] Endpoint: ${endpoint}`);\n    console.log(`[DEBUG] Data:`, data);\n    \n    // Use synchronous request (deprecated but works in Excel custom functions)\n    xhr.open(data ? 'POST' : 'GET', url, false);\n    xhr.setRequestHeader('Content-Type', 'application/json');\n    \n    console.log(`[DEBUG] Request opened, sending...`);\n    \n    if (data) {\n      xhr.send(JSON.stringify(data));\n    } else {\n      xhr.send();\n    }\n    \n    console.log(`[DEBUG] Response received - Status: ${xhr.status}, StatusText: ${xhr.statusText}`);\n    console.log(`[DEBUG] Response headers:`, xhr.getAllResponseHeaders());\n    console.log(`[DEBUG] Response text:`, xhr.responseText.substring(0, 200) + '...');\n    \n    if (xhr.status === 200) {\n      try {\n        const parsed = JSON.parse(xhr.responseText);\n        console.log(`[DEBUG] Successfully parsed response:`, parsed);\n        return parsed;\n      } catch (e) {\n        console.log(`[DEBUG] Failed to parse response:`, e);\n        return {\n          success: false,\n          error: `Failed to parse response: ${(e as Error).message}`,\n          rawResponse: xhr.responseText\n        };\n      }\n    } else {\n      console.log(`[DEBUG] HTTP error: ${xhr.status} - ${xhr.statusText}`);\n      return {\n        success: false,\n        error: `HTTP ${xhr.status}: ${xhr.statusText}`,\n        responseText: xhr.responseText,\n        url: url\n      };\n    }\n  } catch (error) {\n    console.log(`[DEBUG] Exception during request:`, error);\n    return {\n      success: false,\n      error: `Backend request failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      details: error instanceof Error ? error.stack : 'No stack trace',\n      url: `${BACKEND_URL}${endpoint}`\n    };\n  }\n}\n\n///**\n// * Authenticates with a Seeq server using access key and password.\n// * This function will attempt to authenticate synchronously.\n// * \n// * @customfunction SEEQ_AUTH\n// * @param url Seeq server URL (e.g., \"https://your-server.seeq.tech\")\n// * @param accessKey Seeq access key\n// * @param password Seeq password\n// * @param authProvider Authentication provider (default: \"Seeq\")\n// * @param ignoreSslErrors Whether to ignore SSL errors (default: false)\n// * @returns Array containing authentication result\n// */\n/*\nexport function seeqAuth(\n  url: string, \n  accessKey: string, \n  password: string, \n  authProvider: string = \"Seeq\", \n  ignoreSslErrors: boolean = false\n): string[][] {\n  try {\n    // Validate inputs\n    if (!url || !accessKey || !password) {\n      return [[\"Error: URL, access key, and password are required\"]];\n    }\n    \n    // Call backend server\n    const result = callBackendSync('/api/seeq/auth', {\n      url, accessKey, password, authProvider, ignoreSslErrors\n    });\n    \n    if (result.success) {\n      return [\n        [\"Authentication successful\"],\n        [\"User: \" + (result.user || accessKey.substring(0, 8) + \"...\")],\n        [\"Server: \" + (result.server_url || url)],\n        [\"Status: \" + (result.message || \"Authenticated\")],\n        [\"Note: Credentials stored for future use\"]\n      ];\n    } else {\n      // Check if backend server is not running\n      if (result.error && result.error.includes('Failed to fetch') || result.error.includes('NetworkError')) {\n        return [\n          [\"Backend server not running\"],\n          [\"Please start the backend server:\"],\n          [\"1. Open terminal in the backend folder\"],\n          [\"2. Run: npm install && npm start\"],\n          [\"3. Then use this function again\"]\n        ];\n      }\n      \n      // Check for specific network errors\n      if (result.error && result.error.includes('Backend request failed')) {\n        return [\n          [\"Network connection failed\"],\n          [\"Error: \" + result.error],\n          [\"Details: \" + (result.details || \"No additional details\")],\n          [\"URL: \" + (result.url || \"Unknown\")],\n          [\"Please check:\"],\n          [\"1. Backend server is running on port 3000\"],\n          [\"2. No firewall blocking localhost\"],\n          [\"3. Excel can access localhost\"]\n        ];\n      }\n      \n      return [\n        [\"Authentication failed\"],\n        [\"Error: \" + (result.error || result.message || \"Unknown error\")],\n        [\"Details: \" + (result.details || \"No additional details\")],\n        [\"URL: \" + (result.url || \"Unknown\")],\n        [\"Please check Python backend and SPy installation\"]\n      ];\n    }\n    \n  } catch (error) {\n    return [[\"Error: \" + (error instanceof Error ? error.message : 'Unknown error')]];\n  }\n}\n*/\n\n// SEEQ_AUTH function is now disabled - use the taskpane for authentication instead\nexport function seeqAuth(\n  url: string, \n  accessKey: string, \n  password: string, \n  authProvider: string = \"Seeq\", \n  ignoreSslErrors: boolean = false\n): string[][] {\n  return [\n   // [\"SEEQ_AUTH function is disabled\"],\n            [\"Please use the SqExcel taskpane for authentication:\"],\n        [\"1. Open the SqExcel taskpane\"],\n    [\"2. Enter your Seeq credentials\"],\n    [\"3. Click 'Authenticate'\"],\n    [\"4. Then use SEEQ_SENSOR_DATA function\"]\n  ];\n}\n\n///**\n// * Gets the current Seeq authentication status.\n// * @customfunction SEEQ_AUTH_STATUS\n// * @returns String indicating authentication status.\n// */\n/*\nexport function seeqAuthStatus(): string[][] {\n  try {\n    // Try to get stored credentials\n    const credentials = getStoredCredentials();\n    \n    if (credentials) {\n      return [\n        [\"Authentication Status: Credentials Available\"],\n        [\"Server: \" + credentials.url],\n        [\"Access Key: \" + credentials.accessKey.substring(0, 8) + \"...\"],\n        [\"Saved: \" + new Date(credentials.timestamp).toLocaleString()],\n        [\"Note: Use SEEQ_AUTH to test authentication\"]\n      ];\n    } else {\n      return [\n        [\"Authentication Status: No Credentials\"],\n        [\"Message: Please use the SqExcel taskpane to authenticate first\"],\n        [\"Note: Backend server must be running\"]\n      ];\n    }\n    \n  } catch (error) {\n    return [[\"Error: \" + (error instanceof Error ? error.message : 'Unknown error')]];\n  }\n}\n*/\n\n// SEEQ_AUTH_STATUS function is now disabled - use the taskpane for authentication status\nexport function seeqAuthStatus(): string[][] {\n  return [\n   // [\"SEEQ_AUTH_STATUS function is disabled\"],\n            [\"Please use the SqExcel taskpane to check authentication:\"],\n        [\"1. Open the SqExcel taskpane\"],\n    [\"2. Check the authentication status displayed\"],\n    [\"3. If not authenticated, enter credentials and click 'Authenticate'\"]\n  ];\n}\n\n/**\n * Gets the current Python/SPy authentication status.\n * @customfunction SEEQ_PYTHON_AUTH_STATUS\n * @returns String indicating Python authentication status.\n */\nexport function seeqPythonAuthStatus(): string[][] {\n  try {\n    // Call backend server to check Python authentication status\n    const result = callBackendSync('/api/seeq/auth/python-status');\n    \n    if (result.success) {\n      if (result.isAuthenticated) {\n        return [\n          [\"Python Authentication Status: Authenticated\"],\n          [\"User: \" + (result.user || \"Unknown\")],\n          [\"Status: \" + (result.message || \"Success\")]\n        ];\n      } else {\n        return [\n          [\"Python Authentication Status: Not Authenticated\"],\n          [\"Message: \" + (result.message || \"Not authenticated\")]\n        ];\n      }\n    } else {\n      return [\n        [\"Python Authentication Status: Error\"],\n        [\"Error: \" + (result.error || result.message || \"Unknown error\")]\n      ];\n    }\n    \n  } catch (error) {\n    return [[\"Error: \" + (error instanceof Error ? error.message : 'Unknown error')]];\n  }\n}\n\n/**\n * Re-authenticates with Seeq using stored credentials.\n * This can be used if authentication expires or fails.\n * @customfunction SEEQ_REAUTH\n * @returns String indicating re-authentication result.\n */\n/*\nexport function seeqReauth(): string[][] {\n  try {\n    // Try to get stored credentials\n    const credentials = getStoredCredentials();\n    \n    if (!credentials) {\n      return [\n        [\"Re-authentication failed\"],\n        [\"Error: No stored credentials\"],\n        [\"Please use the SqExcel taskpane to authenticate first\"]\n      ];\n    }\n    \n    // Call backend server to re-authenticate\n    const result = callBackendSync('/api/seeq/auth', {\n      url: credentials.url,\n      accessKey: credentials.accessKey,\n      password: credentials.password,\n      authProvider: \"Seeq\",\n      ignoreSslErrors: credentials.ignoreSsl\n    });\n    \n    if (result.success) {\n      return [\n        [\"Re-authentication successful\"],\n        [\"User: \" + (result.user || \"Unknown\")],\n        [\"Server: \" + (result.user || \"Unknown\")],\n        [\"Status: \" + (result.message || \"Re-authenticated\")]\n      ];\n    } else {\n      return [\n        [\"Re-authentication failed\"],\n        [\"Error: \" + (result.error || result.message || \"Unknown error\")]\n      ];\n    }\n    \n  } catch (error) {\n    return [[\"Error: \" + (error instanceof Error ? error.message : 'Unknown error')]];\n  }\n}\n*/\n\n// SEEQ_REAUTH function is now disabled - use the taskpane for re-authentication\nexport function seeqReauth(): string[][] {\n  return [\n    [\"SEEQ_REAUTH function is disabled\"],\n            [\"Please use the SqExcel taskpane for re-authentication:\"],\n        [\"1. Open the SqExcel taskpane\"],\n    [\"2. If credentials are expired, re-enter them\"],\n    [\"3. Click 'Authenticate' to re-authenticate\"]\n  ];\n}\n\n/**\n * Tests connection to a Seeq server.\n * @customfunction SEEQ_TEST_CONNECTION\n * @param url Seeq server URL\n * @returns String indicating connection status.\n */\nexport function seeqTestConnection(url: string): string[][] {\n  try {\n    // Validate input\n    if (!url) {\n      return [[\"Error: Server URL is required\"]];\n    }\n    \n    // Call backend server\n    const result = callBackendSync('/api/seeq/test-connection', { url });\n    \n    if (result.success) {\n      return [\n        [\"Connection Test: Successful\"],\n        [\"Server: \" + url],\n        [\"Status: \" + (result.message || \"Server is reachable\")],\n        [\"Status Code: \" + (result.status_code || \"N/A\")]\n      ];\n    } else {\n      // Check if backend server is not running\n      if (result.error && result.error.includes('Failed to fetch') || result.error.includes('NetworkError')) {\n        return [\n          [\"Backend server not running\"],\n          [\"Please start the backend server:\"],\n          [\"1. Open terminal in the backend folder\"],\n          [\"2. Run: npm install && npm start\"],\n          [\"3. Then use this function again\"]\n        ];\n      }\n      \n      return [\n        [\"Connection Test: Failed\"],\n        [\"Server: \" + url],\n        [\"Error: \" + (result.error || result.message || \"Unknown error\")]\n      ];\n    }\n    \n  } catch (error) {\n    return [[\"Error: \" + (error instanceof Error ? error.message : 'Unknown error')]];\n  }\n}\n\n/**\n * Gets Seeq server information.\n * @customfunction SEEQ_SERVER_INFO\n * @param url Seeq server URL\n * @returns String containing server information.\n */\nexport function seeqServerInfo(url: string): string[][] {\n  try {\n    // Validate input\n    if (!url) {\n      return [[\"Error: Server URL is required\"]];\n    }\n    \n    // Call backend server\n    const result = callBackendSync('/api/seeq/server-info', { url });\n    \n    if (result.success) {\n      const serverInfo = result.server_info;\n      const infoRows: string[][] = [\n        [\"Server Information for: \" + url],\n        [\"Status: \" + (serverInfo.status || \"Unknown\")],\n        [\"Message: \" + result.message]\n      ];\n      \n      // Add additional server info if available\n      if (serverInfo.version) {\n        infoRows.push([\"Version: \" + serverInfo.version]);\n      }\n      if (serverInfo.name) {\n        infoRows.push([\"Name: \" + serverInfo.name]);\n      }\n      if (serverInfo.description) {\n        infoRows.push([\"Description: \" + serverInfo.description]);\n      }\n      \n      return infoRows;\n    } else {\n      // Check if backend server is not running\n      if (result.error && result.error.includes('Failed to fetch') || result.error.includes('NetworkError')) {\n        return [\n          [\"Backend server not running\"],\n          [\"Please start the backend server:\"],\n          [\"1. Open terminal in the backend folder\"],\n          [\"2. Run: npm install && npm start\"],\n          [\"3. Then use this function again\"]\n        ];\n      }\n      \n      return [\n        [\"Failed to get server info\"],\n        [\"Error: \" + (result.error || result.message || \"Unknown error\")],\n        [\"Server: \" + url]\n      ];\n    }\n    \n  } catch (error) {\n    return [[\"Error: \" + (error instanceof Error ? error.message : 'Unknown error')]];\n  }\n}\n\n/**\n * Helper function to convert timestamps to Excel serial numbers\n * Returns Excel's internal date representation for better compatibility\n * Excel serial number = (JS timestamp / (1000 * 60 * 60 * 24)) + 25569\n * \n * Note: These serial numbers will display as large numbers (e.g., 45870.0)\n * To see them as readable dates, users should:\n * 1. Select the timestamp column\n * 2. Right-click → Format Cells → Date\n * 3. Choose desired date format (e.g., \"3/14/12 1:30 PM\")\n */\nfunction convertToExcelSerialNumber(timestamp: any): number {\n  try {\n    // Handle different timestamp formats that might come from the backend\n    let date: Date;\n    \n    if (typeof timestamp === 'string') {\n      // Try to parse ISO string or other date formats\n      date = new Date(timestamp);\n    } else if (timestamp instanceof Date) {\n      date = timestamp;\n    } else if (typeof timestamp === 'number') {\n      // Handle Unix timestamp\n      date = new Date(timestamp);\n    } else {\n      // Fallback for unknown formats\n      return 0; // Return 0 for invalid dates\n    }\n    \n    // Check if date is valid\n    if (isNaN(date.getTime())) {\n      return 0; // Return 0 for invalid dates\n    }\n    \n    // Convert to Excel serial number\n    // Excel serial number = (JS timestamp / (1000 * 60 * 60 * 24)) + 25569\n    // Where 25569 is the number of days between 1900-01-01 and 1970-01-01\n    const excelSerial = (date.getTime() / (1000 * 60 * 60 * 24)) + 25569;\n    \n    return excelSerial;\n  } catch (error) {\n    // If any error occurs during conversion, return 0\n    return 0;\n  }\n}\n\n/**\n * Searches for sensors in Seeq and pulls their data over a specified time range.\n * This is an array function that should be called on a range that can accommodate the output.\n * \n * @customfunction SEEQ_SENSOR_DATA\n * @param sensorNames Range containing sensor names (e.g., B1:D1)\n * @param startDatetime Start time for data pull (ISO format: \"2024-01-01T00:00:00\")\n * @param endDatetime End time for data pull (ISO format: \"2024-01-31T23:59:59\")\n * @param grid Grid interval for data (e.g., \"15min\", \"1h\", \"1d\") - defaults to \"15min\"\n * @returns Array containing timestamp column (as Excel serial numbers) and sensor data columns\n */\nexport function seeqSensorData(\n  sensorNames: string[][],\n  startDatetime: string,\n  endDatetime: string,\n  grid: string = \"15min\"\n): string[][] {\n  try {\n    // Flatten the sensor names array and filter out empty cells\n    const sensorNamesList = sensorNames\n      .flat()\n      .filter(name => name && name.trim() !== \"\");\n    \n    if (sensorNamesList.length === 0) {\n      return [[\"Error: No sensor names provided\"]];\n    }\n    \n    // Validate datetime format\n    const startDate = new Date(startDatetime);\n    const endDate = new Date(endDatetime);\n    \n    if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {\n      return [[\"Error: Invalid datetime format. Use ISO format: YYYY-MM-DDTHH:MM:SS\"]];\n    }\n    \n    if (startDate >= endDate) {\n      return [[\"Error: Start datetime must be before end datetime\"]];\n    }\n    \n    // Validate grid format\n    const gridPattern = /^(\\d+)(min|h|d|s)$/;\n    if (!gridPattern.test(grid)) {\n      return [[\"Error: Invalid grid format. Use format like '15min', '1h', '1d', '30s'\"]];\n    }\n\n        // Check if we have stored credentials\n    const authCredentials = getStoredCredentials();\n    if (!authCredentials) {\n      return [[\"Error: Not authenticated to Seeq. Please use the TSFlow taskpane to authenticate first.\"]];\n    }\n    \n    // Call backend server with credentials\n    const result = callBackendSync('/api/seeq/sensor-data', {\n      sensorNames: sensorNamesList,\n      startDatetime,\n      endDatetime,\n      grid,\n      url: authCredentials.url,\n      accessKey: authCredentials.accessKey,\n      password: authCredentials.password,\n      authProvider: \"Seeq\",\n      ignoreSslErrors: authCredentials.ignoreSsl\n    });\n    \n    if (result.success && result.data && result.data.length > 0) {\n      // Create header row with timestamp and sensor names\n      const headers = [\"Timestamp\"].concat(result.data_columns || []);\n      \n      // Create data rows with formatted timestamps\n      const dataRows = result.data.map((row: any) => {\n        const timestamp = row.Timestamp || row.index || \"N/A\";\n        // Convert timestamp to Excel serial number for best compatibility\n        const excelSerialTimestamp = convertToExcelSerialNumber(timestamp);\n        const values = (result.data_columns || []).map((col: string) => {\n          return row[col] !== undefined ? row[col] : \"N/A\";\n        });\n        return [excelSerialTimestamp].concat(values);\n      });\n      \n      return [headers].concat(dataRows);\n    } else {\n      // Check if backend server is not running\n      if (result.error && result.error.includes('Failed to fetch') || result.error.includes('NetworkError')) {\n        return [\n          [\"Backend server not running\"],\n          [\"Please start the backend server:\"],\n          [\"1. Open terminal in the backend folder\"],\n          [\"2. Run: npm install && npm start\"],\n          [\"3. Then use this function again\"]\n        ];\n      }\n      \n      return [\n        [\"No data returned\"],\n        [\"Error: \" + (result.error || result.message || \"Unknown error\")],\n        [\"Sensors: \" + sensorNamesList.join(\", \")],\n        [\"Time Range: \" + startDatetime + \" to \" + endDatetime]\n      ];\n    }\n    \n  } catch (error) {\n    return [[\"Error: \" + (error instanceof Error ? error.message : 'Unknown error')]];\n  }\n}\n\n/**\n * Searches for sensors in Seeq without pulling data.\n * \n * @customfunction SEEQ_SEARCH_SENSORS\n * @param sensorNames Range containing sensor names (e.g., B1:D1)\n * @returns Array containing search results for each sensor\n */\nexport function seeqSensorSearch(sensorNames: string[][]): string[][] {\n  try {\n    // Flatten the sensor names array and filter out empty cells\n    const sensorNamesList = sensorNames\n      .flat()\n      .filter(name => name && name.trim() !== \"\");\n    \n    if (sensorNamesList.length === 0) {\n      return [[\"Error: No sensor names provided\"]];\n    }\n\n    // Check if we have stored credentials\n    const searchCredentials = getStoredCredentials();\n    if (!searchCredentials) {\n      return [[\"Error: Not authenticated to Seeq. Please use SqExcel taskpane to authenticate first.\"]];\n    }\n    \n    // Call backend server with credentials\n    const result = callBackendSync('/api/seeq/search-sensors', {\n      sensorNames: sensorNamesList,\n      url: searchCredentials.url,\n      accessKey: searchCredentials.accessKey,\n      password: searchCredentials.password,\n      authProvider: \"Seeq\",\n      ignoreSslErrors: searchCredentials.ignoreSsl\n    });\n    \n    if (result.success && result.search_results && result.search_results.length > 0) {\n      // Create header row\n      const headers = [\"Name\", \"ID\", \"Datasource Name\", \"Value Unit Of Measure\", \"Description\"];\n      \n      // Create data rows\n      const dataRows = result.search_results.map((sensor: any) => {\n        return [\n          sensor[\"Name\"] || \"N/A\",\n          sensor[\"ID\"] || \"Not Found\",\n          sensor[\"Datasource Name\"] || \"N/A\",\n          sensor[\"Value Unit Of Measure\"] || \"N/A\",\n          sensor[\"Description\"] || \"N/A\"\n        ];\n      });\n      \n      return [headers].concat(dataRows);\n    } else {\n      // Check if backend server is not running\n      if (result.error && result.error.includes('Failed to fetch') || result.error.includes('NetworkError')) {\n        return [\n          [\"Backend server not running\"],\n          [\"Please start the backend server:\"],\n          [\"1. Open terminal in the backend folder\"],\n          [\"2. Run: npm install && npm start\"],\n          [\"3. Then use this function again\"]\n        ];\n      }\n      \n      return [\n        [\"No search results returned\"],\n        [\"Error: \" + (result.error || result.message || \"Unknown error\")],\n        [\"Sensors: \" + sensorNamesList.join(\", \")]\n      ];\n    }\n    \n  } catch (error) {\n    return [[\"Error: \" + (error instanceof Error ? error.message : 'Unknown error')]];\n  }\n}\n\nCustomFunctions.associate(\"ADD\", add);\nCustomFunctions.associate(\"CLOCK\", clock);\nCustomFunctions.associate(\"INCREMENT\", increment);\nCustomFunctions.associate(\"LOG\", logMessage);\nCustomFunctions.associate(\"SEEQ_PYTHON_AUTH_STATUS\", seeqPythonAuthStatus);\nCustomFunctions.associate(\"SEEQ_REAUTH\", seeqReauth);\nCustomFunctions.associate(\"SEEQ_TEST_CONNECTION\", seeqTestConnection);\nCustomFunctions.associate(\"SEEQ_SERVER_INFO\", seeqServerInfo);\nCustomFunctions.associate(\"SEEQ_SENSOR_DATA\", seeqSensorData);\nCustomFunctions.associate(\"SEEQ_SEARCH_SENSORS\", seeqSensorSearch);"],"names":["BACKEND_URL","getStoredCredentials","result","callBackendSync","success","credentials","savedTime","Date","timestamp","getTime","error","console","log","endpoint","data","arguments","length","undefined","xhr","XMLHttpRequest","url","concat","open","setRequestHeader","send","JSON","stringify","status","statusText","getAllResponseHeaders","responseText","substring","parsed","parse","e","message","rawResponse","Error","details","stack","CustomFunctions","associate","first","second","invocation","timer","setInterval","time","toLocaleTimeString","setResult","onCanceled","clearInterval","incrementBy","isAuthenticated","user","status_code","includes","serverInfo","server_info","infoRows","version","push","name","description","sensorNames","startDatetime","endDatetime","grid","sensorNamesList","flat","filter","trim","startDate","endDate","isNaN","test","authCredentials","accessKey","password","authProvider","ignoreSslErrors","ignoreSsl","headers","data_columns","dataRows","map","row","excelSerialTimestamp","date","convertToExcelSerialNumber","Timestamp","index","values","col","join","searchCredentials","search_results","sensor"],"sourceRoot":""}