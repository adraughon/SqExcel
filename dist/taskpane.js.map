{"version":3,"file":"taskpane.js","mappings":";+FACIA,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaE,QAGrB,IAAIC,EAASN,EAAyBE,GAAY,CAGjDG,QAAS,CAAC,GAOX,OAHAE,EAAoBL,GAAUI,EAAQA,EAAOD,QAASJ,GAG/CK,EAAOD,OACf,CAGAJ,EAAoBO,EAAID,ECzBxBN,EAAoBQ,EAAI,WACvB,GAA0B,iBAAfC,WAAyB,OAAOA,WAC3C,IACC,OAAOC,MAAQ,IAAIC,SAAS,cAAb,EAChB,CAAE,MAAOC,GACR,GAAsB,iBAAXC,OAAqB,OAAOA,MACxC,CACA,CAPuB,GCAxBb,EAAoBc,EAAI,SAASC,EAAKC,GAAQ,OAAOC,OAAOC,UAAUC,eAAeC,KAAKL,EAAKC,EAAO,E,WCAtG,IAAIK,EACArB,EAAoBQ,EAAEc,gBAAeD,EAAYrB,EAAoBQ,EAAEe,SAAW,IACtF,IAAIC,EAAWxB,EAAoBQ,EAAEgB,SACrC,IAAKH,GAAaG,IACbA,EAASC,eAAkE,WAAjDD,EAASC,cAAcC,QAAQC,gBAC5DN,EAAYG,EAASC,cAAcG,MAC/BP,GAAW,CACf,IAAIQ,EAAUL,EAASM,qBAAqB,UAC5C,GAAGD,EAAQE,OAEV,IADA,IAAIC,EAAIH,EAAQE,OAAS,EAClBC,GAAK,KAAOX,IAAc,aAAaY,KAAKZ,KAAaA,EAAYQ,EAAQG,KAAKJ,GAE3F,CAID,IAAKP,EAAW,MAAM,IAAIa,MAAM,yDAChCb,EAAYA,EAAUc,QAAQ,SAAU,IAAIA,QAAQ,OAAQ,IAAIA,QAAQ,QAAS,IAAIA,QAAQ,YAAa,KAC1GnC,EAAoBoC,EAAIf,C,IClBxBrB,EAAoBqC,EAAIb,SAASc,SAAWC,KAAKhB,SAASiB,K,8PCC1D,IAAA5B,EAAA6B,EAAAC,EAAA,mBAAAC,OAAAA,OAAA,GAAAC,EAAAF,EAAAG,UAAA,aAAA/B,EAAA4B,EAAAI,aAAA,yBAAAd,EAAAU,EAAAE,EAAA9B,EAAAkB,GAAA,IAAAe,EAAAH,GAAAA,EAAA1B,qBAAA8B,EAAAJ,EAAAI,EAAAC,EAAAhC,OAAAiC,OAAAH,EAAA7B,WAAA,OAAAiC,EAAAF,EAAA,mBAAAP,EAAAE,EAAA9B,GAAA,IAAAkB,EAAAe,EAAAE,EAAAG,EAAA,EAAAhB,EAAAtB,GAAA,GAAAuC,GAAA,EAAAC,EAAA,CAAAlB,EAAA,EAAAQ,EAAA,EAAAW,EAAA3C,EAAA4C,EAAAC,EAAAL,EAAAK,EAAAC,KAAA9C,EAAA,GAAA6C,EAAA,SAAAhB,EAAAC,GAAA,OAAAV,EAAAS,EAAAM,EAAA,EAAAE,EAAArC,EAAA0C,EAAAV,EAAAF,EAAAc,CAAA,YAAAC,EAAAf,EAAAE,GAAA,IAAAG,EAAAL,EAAAO,EAAAL,EAAAH,EAAA,GAAAY,GAAAD,IAAAtC,GAAA2B,EAAAL,EAAAL,OAAAU,IAAA,KAAA3B,EAAAkB,EAAAI,EAAAK,GAAAgB,EAAAH,EAAAlB,EAAAuB,EAAA3B,EAAA,GAAAU,EAAA,GAAA5B,EAAA6C,IAAAf,KAAAK,EAAAjB,GAAAe,EAAAf,EAAA,OAAAe,EAAA,MAAAf,EAAA,GAAAA,EAAA,GAAApB,GAAAoB,EAAA,IAAAyB,KAAA3C,EAAA4B,EAAA,GAAAe,EAAAzB,EAAA,KAAAe,EAAA,EAAAO,EAAAC,EAAAX,EAAAU,EAAAV,EAAAZ,EAAA,IAAAyB,EAAAE,IAAA7C,EAAA4B,EAAA,GAAAV,EAAA,GAAAY,GAAAA,EAAAe,KAAA3B,EAAA,GAAAU,EAAAV,EAAA,GAAAY,EAAAU,EAAAV,EAAAe,EAAAZ,EAAA,OAAAjC,GAAA4B,EAAA,SAAAc,EAAA,MAAAH,GAAA,EAAAT,CAAA,iBAAA9B,EAAAsB,EAAAuB,GAAA,GAAAP,EAAA,QAAAQ,UAAA,oCAAAP,GAAA,IAAAjB,GAAAqB,EAAArB,EAAAuB,GAAAZ,EAAAX,EAAAa,EAAAU,GAAAlB,EAAAM,EAAA,EAAAnC,EAAAqC,KAAAI,GAAA,CAAArB,IAAAe,EAAAA,EAAA,GAAAA,EAAA,IAAAO,EAAAV,GAAA,GAAAa,EAAAV,EAAAE,IAAAK,EAAAV,EAAAK,EAAAK,EAAAC,EAAAN,GAAA,OAAAG,EAAA,EAAApB,EAAA,IAAAe,IAAAjC,EAAA,QAAA2B,EAAAT,EAAAlB,GAAA,MAAA2B,EAAAA,EAAArB,KAAAY,EAAAiB,IAAA,MAAAW,UAAA,wCAAAnB,EAAAoB,KAAA,OAAApB,EAAAQ,EAAAR,EAAAqB,MAAAf,EAAA,IAAAA,EAAA,YAAAA,IAAAN,EAAAT,EAAA+B,SAAAtB,EAAArB,KAAAY,GAAAe,EAAA,IAAAE,EAAAW,UAAA,oCAAA9C,EAAA,YAAAiC,EAAA,GAAAf,EAAApB,CAAA,UAAA6B,GAAAY,EAAAC,EAAAV,EAAA,GAAAK,EAAAP,EAAAtB,KAAAwB,EAAAU,MAAAE,EAAA,YAAAf,GAAAT,EAAApB,EAAAmC,EAAA,EAAAE,EAAAR,CAAA,SAAAW,EAAA,UAAAU,MAAArB,EAAAoB,KAAAR,EAAA,GAAAX,EAAA5B,EAAAkB,IAAA,GAAAiB,CAAA,KAAAO,EAAA,YAAAR,IAAA,UAAAgB,IAAA,UAAAC,IAAA,CAAAxB,EAAAxB,OAAAiD,eAAA,IAAAnB,EAAA,GAAAH,GAAAH,EAAAA,EAAA,GAAAG,QAAAO,EAAAV,EAAA,GAAAG,EAAA,yBAAAH,GAAAQ,EAAAgB,EAAA/C,UAAA8B,EAAA9B,UAAAD,OAAAiC,OAAAH,GAAA,SAAAK,EAAAxC,GAAA,OAAAK,OAAAkD,eAAAlD,OAAAkD,eAAAvD,EAAAqD,IAAArD,EAAAwD,UAAAH,EAAAd,EAAAvC,EAAAE,EAAA,sBAAAF,EAAAM,UAAAD,OAAAiC,OAAAD,GAAArC,CAAA,QAAAoD,EAAA9C,UAAA+C,EAAAd,EAAAF,EAAA,cAAAgB,GAAAd,EAAAc,EAAA,cAAAD,GAAAA,EAAAK,YAAA,oBAAAlB,EAAAc,EAAAnD,EAAA,qBAAAqC,EAAAF,GAAAE,EAAAF,EAAAnC,EAAA,aAAAqC,EAAAF,EAAAL,EAAA,yBAAAO,EAAAF,EAAA,oDAAAqB,EAAA,kBAAAC,EAAAvC,EAAAzB,EAAA6C,EAAA,cAAAD,EAAAvC,EAAA8B,EAAAE,EAAAH,GAAA,IAAAT,EAAAf,OAAAuD,eAAA,IAAAxC,EAAA,gBAAApB,GAAAoB,EAAA,EAAAmB,EAAA,SAAAvC,EAAA8B,EAAAE,EAAAH,GAAA,SAAA3B,EAAA4B,EAAAE,GAAAO,EAAAvC,EAAA8B,EAAA,SAAA9B,GAAA,YAAA6D,QAAA/B,EAAAE,EAAAhC,EAAA,GAAA8B,EAAAV,EAAAA,EAAApB,EAAA8B,EAAA,CAAAoB,MAAAlB,EAAA8B,YAAAjC,EAAAkC,cAAAlC,EAAAmC,UAAAnC,IAAA7B,EAAA8B,GAAAE,GAAA9B,EAAA,UAAAA,EAAA,WAAAA,EAAA,cAAAqC,EAAAvC,EAAA8B,EAAAE,EAAAH,EAAA,UAAAoC,EAAAjC,EAAAH,EAAA7B,EAAA8B,EAAA5B,EAAA0C,EAAAT,GAAA,QAAAf,EAAAY,EAAAY,GAAAT,GAAAE,EAAAjB,EAAA8B,KAAA,OAAAlB,GAAA,YAAAhC,EAAAgC,EAAA,CAAAZ,EAAA6B,KAAApB,EAAAQ,GAAA6B,QAAAC,QAAA9B,GAAA+B,KAAAtC,EAAA5B,EAAA,UAAAmE,EAAArC,GAAA,sBAAAH,EAAA,KAAA7B,EAAAsE,UAAA,WAAAJ,QAAA,SAAApC,EAAA5B,GAAA,IAAA0C,EAAAZ,EAAAuC,MAAA1C,EAAA7B,GAAA,SAAAwE,EAAAxC,GAAAiC,EAAArB,EAAAd,EAAA5B,EAAAsE,EAAAC,EAAA,OAAAzC,EAAA,UAAAyC,EAAAzC,GAAAiC,EAAArB,EAAAd,EAAA5B,EAAAsE,EAAAC,EAAA,QAAAzC,EAAA,CAAAwC,OAAA,eAAAE,EAAA1E,EAAA8B,GAAA,QAAAD,EAAA,EAAAA,EAAAC,EAAAX,OAAAU,IAAA,KAAA3B,EAAA4B,EAAAD,GAAA3B,EAAA4D,WAAA5D,EAAA4D,aAAA,EAAA5D,EAAA6D,cAAA,YAAA7D,IAAAA,EAAA8D,UAAA,GAAA3D,OAAAuD,eAAA5D,EAAA2E,EAAAzE,EAAA0E,KAAA1E,EAAA,WAAA2E,EAAA7E,EAAA8B,EAAAD,GAAA,OAAAC,EAAA6C,EAAA7C,MAAA9B,EAAAK,OAAAuD,eAAA5D,EAAA8B,EAAA,CAAAoB,MAAArB,EAAAiC,YAAA,EAAAC,cAAA,EAAAC,UAAA,IAAAhE,EAAA8B,GAAAD,EAAA7B,CAAA,UAAA2E,EAAA9C,GAAA,IAAAT,EAAA,SAAAS,GAAA,aAAAiD,EAAAjD,KAAAA,EAAA,OAAAA,EAAA,IAAA7B,EAAA6B,EAAAE,OAAAgD,aAAA,YAAA/E,EAAA,KAAAoB,EAAApB,EAAAQ,KAAAqB,EAAAC,UAAA,aAAAgD,EAAA1D,GAAA,OAAAA,EAAA,UAAA4B,UAAA,uDAAAgC,OAAAnD,EAAA,CAAAoD,CAAApD,GAAA,gBAAAiD,EAAA1D,GAAAA,EAAAA,EAAA,GAiEO,IAAM8D,EAAa,WAaxB,OA9EFlF,EAwEE,SAAAkF,EAAYC,IAxEd,SAAAvC,EAAAZ,GAAA,KAAAY,aAAAZ,GAAA,UAAAgB,UAAA,qCAwEqCoC,CAAA,KAAAF,GAAAL,EAAA,iBAJA,MAAIA,EAAA,mBACZ,MAAIA,EAAA,qBACA,IAG7B/E,KAAKqF,cAAgBA,EAAc5D,QAAQ,MAAO,IAClDzB,KAAKuF,SAAW,iCAChBvF,KAAKwF,cAAc,cAAe,yCAAFC,OAA2CzF,KAAKuF,SAAQ,mBAAAE,OAAkBzF,KAAKqF,eACjH,EA5EFrD,EA8EE,EAAA8C,IAAA,gBAAA1B,MAGA,SAAsBsC,EAAkBC,EAAiBC,GACvD,IAAMC,EAAW,CACfC,WAAW,IAAIC,MAAOC,cACtBN,SAAAA,EACAC,QAAAA,EACAC,KAAAA,EACAK,UAAWC,UAAUD,UACrBE,OAAQhG,OAAOU,SAASsF,OACxBC,UAAWpG,KAAKqG,kBAChBC,YAAatG,KAAKuG,kBAGpBvG,KAAKwG,cAAcC,KAAKZ,EAC1B,GAEA,CAAAf,IAAA,kBAAA1B,MAGA,WACE,IACE,MAAsB,oBAAXsD,QAA0BA,OAAOC,QACnC,eAAPlB,OAAsBiB,OAAOC,QAAQC,MAAQ,gBAEd,WAA7BzG,OAAOU,SAASgG,SACX,oBAEwB,UAA7B1G,OAAOU,SAASgG,SACX,mBAEwB,UAA7B1G,OAAOU,SAASgG,SACX,wBAEF,qBAAPpB,OAA4BtF,OAAOU,SAASgG,SAC9C,CAAE,MAAOC,GACP,MAAO,4BAAPrB,OAAmCqB,EACrC,CACF,GAEA,CAAAhC,IAAA,iBAAA1B,MAGA,WACE,IACE,IAAM2D,EAAcb,UAAkBa,YAAeb,UAAkBc,eAAkBd,UAAkBe,iBAC3G,MAAO,CACLC,OAAQhB,UAAUiB,OAClBC,gBAAgBL,aAAU,EAAVA,EAAYM,gBAAiB,UAC7CC,UAAUP,aAAU,EAAVA,EAAYO,WAAY,UAClCC,KAAKR,aAAU,EAAVA,EAAYQ,MAAO,UAE5B,CAAE,MAAOT,GACP,MAAO,CAAEI,OAAQhB,UAAUiB,OAAQL,MAAOA,EAAMU,WAClD,CACF,GAEA,CAAA1C,IAAA,iBAAA1B,MAGA,WACE,MAAO,CACLqE,WAAY,CACVlC,SAAUvF,KAAKuF,SACfF,cAAerF,KAAKqF,cACpBqC,kBAAmB1H,KAAK2H,UACxBC,mBAAoB5H,KAAKwG,cAAcnF,QAEzCwG,YAAa,CACX5B,UAAWC,UAAUD,UACrBE,OAAQhG,OAAOU,SAASsF,OACxBC,UAAWpG,KAAKqG,kBAChBC,YAAatG,KAAKuG,iBAClBT,WAAW,IAAIC,MAAOC,eAExB8B,WAAY9H,KAAKwG,cAAcuB,OAAO,IAE1C,GAEA,CAAAjD,IAAA,mBAAA1B,MAGA,WACEpD,KAAKwG,cAAgB,GACrBxG,KAAKwF,cAAc,sBAAuB,0BAC5C,GAEA,CAAAV,IAAA,iBAAA1B,OAAA4E,EAAAzD,EAAAX,IAAA/D,EAGA,SAAAoI,IAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA1C,EAAA2C,EAAAC,EAAA7C,EAAA8C,EAAAC,EAAA,OAAA9E,IAAAC,EAAA,SAAA8E,GAAA,cAAAA,EAAAjH,EAAAiH,EAAAzG,GAAA,OASK,OARGgG,EAAYnC,KAAK6C,MACjBT,EAAM,GAAH1C,OAAMzF,KAAKuF,SAAQ,6BAE5BvF,KAAKwF,cAAc,8BAA+B,uCAAFC,OAAyCzF,KAAKuF,UAAY,CACxG4C,IAAAA,EACA9C,cAAerF,KAAKqF,cACpBe,UAAWpG,KAAKqG,kBAChBC,YAAatG,KAAKuG,mBACjBoC,EAAAjH,EAAA,EAAAiH,EAAAzG,EAAA,EAGsB2G,MAAMV,EAAK,CAChCW,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBC,SAAUnJ,KAAKqF,kBAEjB,OAgBC,GAxBG+C,EAAQO,EAAA9F,EAURwF,EAActC,KAAK6C,MAAQV,EAG3BI,EAAkB,CAAC,EACzBF,EAASW,QAAQK,QAAQ,SAAChG,EAAO0B,GAC/BwD,EAAWxD,GAAO1B,CACpB,GAEApD,KAAKwF,cAAc,4BAA6B,0CAA2C,CACzF6D,OAAQjB,EAASiB,OACjBC,WAAYlB,EAASkB,WACrBjB,YAAAA,EACAC,WAAAA,EACAH,IAAKC,EAASD,OAGZC,EAASmB,GAAI,CAAFZ,EAAAzG,EAAA,eAAAyG,EAAAzG,EAAA,EACMkG,EAASoB,OAAM,OACuD,OADnF5D,EAAI+C,EAAA9F,EACV7C,KAAKwF,cAAc,2BAA4B,mCAAoCI,GAAM+C,EAAA7F,EAAA,EAElF,CACL2G,SAAS,EACT9D,QAASC,EAAKD,SAAW,oDACzB+D,YAAatB,EAASiB,OACtBM,YAAa,CACXC,iBAAkBtB,EAClBuB,eAAgBxB,EAChByB,WAAY5D,UAAUD,UACtBE,OAAQhG,OAAOU,SAASsF,OACxB4D,WAAY/J,KAAKqG,kBACjB2D,aAAchK,KAAKuG,iBAAiBa,eACpC6C,YAAa,QAEhB,cAAAtB,EAAAzG,EAAA,EAEuBkG,EAASoB,OAAOU,MAAM,iBAAO,CAAC,CAAC,GAAE,OAMtD,OANG3B,EAASI,EAAA9F,EACf7C,KAAKwF,cAAc,0BAA2B,6CAAFC,OAA+C2C,EAASiB,QAAU,CAC5GA,OAAQjB,EAASiB,OACjBC,WAAYlB,EAASkB,WACrBP,QAAST,EACTC,UAAAA,IACCI,EAAA7F,EAAA,EAEI,CACL2G,SAAS,EACT9D,QAAS4C,EAAU5C,SAAW,4CAAJF,OAAgD2C,EAASiB,QACnFK,YAAatB,EAASiB,OACtBvC,MAAOyB,EAAUzB,OAAS,QAAJrB,OAAY2C,EAASiB,QAC3CM,YAAa,CACXC,iBAAkBtB,EAClBuB,eAAgBxB,EAChByB,WAAY5D,UAAUD,UACtBE,OAAQhG,OAAOU,SAASsF,OACxB4D,WAAY/J,KAAKqG,kBACjB2D,aAAchK,KAAKuG,iBAAiBa,eACpC6C,YAAa,QAEhB,OAAAtB,EAAAzG,EAAA,eA4BF,OA5BEyG,EAAAjH,EAAA,EAAAgH,EAAAC,EAAA9F,EAGGwF,EAActC,KAAK6C,MAAQV,EAEjClI,KAAKwF,cAAc,yBAA0B,8BAA+B,CAC1EsB,MAAO4B,EAAM/C,QACbwE,UAAWzB,EAAM0B,KACjBC,WAAY3B,EAAM4B,MAClBjC,YAAAA,EACAF,IAAAA,IAGExC,EAAU,+BACV8C,EAAY,UAEG,cAAfC,EAAM0B,MAAwB1B,EAAM/C,QAAQ4E,SAAS,UACvD5E,EAAU,0FACV8C,EAAY,mBACY,eAAfC,EAAM0B,MACfzE,EAAU,kEACV8C,EAAY,WACHC,EAAM/C,QAAQ4E,SAAS,oBAChC5E,EAAU,6FACV8C,EAAY,eAEZ9C,EAAU,iCAAHF,OAAoCiD,EAAM/C,SACjD8C,EAAYC,EAAM/C,SACnBgD,EAAA7F,EAAA,EAEM,CACL2G,SAAS,EACT9D,QAAAA,EACAmB,MAAO2B,EACPkB,YAAa,CACXE,eAAgBxB,EAChByB,WAAY5D,UAAUD,UACtBE,OAAQhG,OAAOU,SAASsF,OACxB4D,WAAY/J,KAAKqG,kBACjB2D,aAAchK,KAAKuG,iBAAiBa,eACpC6C,YAAa,QAEhB,cAAAtB,EAAA7F,EAAA,KAAAmF,EAAA,iBAEJ,WA3HmB,OAAAD,EAAAvD,MAAC,KAADD,UAAA,IA6HpB,CAAAM,IAAA,eAAA1B,OAAAoH,EAAAjG,EAAAX,IAAA/D,EAGA,SAAA4K,EAAmBC,EAAmBC,GAAgB,IAAAC,EAAAC,EAAAzC,EAAAxC,EAAA2C,EAAAuC,EAAArC,EAAAsC,EAAAC,EAAAC,EAAAzG,UAAA,OAAAZ,IAAAC,EAAA,SAAAqH,GAAA,cAAAA,EAAAxJ,EAAAwJ,EAAAhJ,GAAA,OAe/C,OAfiD0I,EAAoBK,EAAA5J,OAAA,QAAA5B,IAAAwL,EAAA,GAAAA,EAAA,GAAG,OAAQJ,EAAwBI,EAAA5J,OAAA,QAAA5B,IAAAwL,EAAA,IAAAA,EAAA,GAAQC,EAAAxJ,EAAA,EAGnH1B,KAAKmL,YAAc,CACjBT,UAAAA,EACAC,SAAAA,EACAC,aAAAA,EACAC,gBAAAA,EACA1B,SAAUnJ,KAAKqF,eAGjBrF,KAAKwF,cAAc,mBAAoB,6CAAFC,OAA+CzF,KAAKuF,UAAY,CACnGF,cAAerF,KAAKqF,cACpBqF,UAAAA,EACAE,aAAAA,IACCM,EAAAhJ,EAAA,EAEoB2G,MAAM,GAADpD,OAAIzF,KAAKuF,SAAQ,kBAAkB,CAC7DuD,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBC,SAAUnJ,KAAKqF,cACf+F,SAAUV,EACVC,SAAUA,EACVU,cAAeT,EACfU,kBAAmBT,MAErB,OAKC,GAjBGzC,EAAQ8C,EAAArI,EAcd7C,KAAKwF,cAAc,sBAAuB,yCAA0C,CAClF6D,OAAQjB,EAASiB,OACjBC,WAAYlB,EAASkB,cAGnBlB,EAASmB,GAAI,CAAF2B,EAAAhJ,EAAA,eAAAgJ,EAAAhJ,EAAA,EACMkG,EAASoB,OAAM,OAQlC,OARM5D,EAAIsF,EAAArI,EACV7C,KAAK2H,UAAY/B,EAAK2F,OAAS,gBAE/BvL,KAAKwF,cAAc,qBAAsB,kCAAmC,CAC1EgG,KAAM5F,EAAK4F,KACXC,WAAY7F,EAAK6F,aAGnBP,EAAAxJ,EAAA,EAAAwJ,EAAAhJ,EAAA,EAEQlC,KAAK0L,2BAA0B,OAAAR,EAAAhJ,EAAA,eAAAgJ,EAAAxJ,EAAA,EAAAqJ,EAAAG,EAAArI,EAErC8I,QAAQC,KAAK,mDAAkDb,GAC/D,cAAAG,EAAApI,EAAA,EAGK,CACL2G,SAAS,EACT9D,QAASC,EAAKD,SAAW,iCAAJF,OAAqCiF,GAC1Dc,KAAM5F,EAAK4F,MAAQd,EACnBe,WAAY7F,EAAK6F,YAAczL,KAAKqF,cACpCkG,MAAOvL,KAAK2H,gBAAalI,IAC1B,cAAAyL,EAAAhJ,EAAA,EAEuBkG,EAASoB,OAAOU,MAAM,iBAAO,CAAC,CAAC,GAAE,OAItD,OAJG3B,EAAS2C,EAAArI,EACf7C,KAAKwF,cAAc,oBAAqB,8BAA+B,CACrE6D,OAAQjB,EAASiB,OACjBd,UAAAA,IACC2C,EAAApI,EAAA,EAEI,CACL2G,SAAS,EACT9D,QAAS4C,EAAU5C,SAAW,qCAAJF,OAAyC2C,EAASiB,QAC5EvC,MAAOyB,EAAUzB,OAAS,QAAJrB,OAAY2C,EAASiB,UAC5C,QAAA6B,EAAAhJ,EAAA,iBAuBF,OAvBEgJ,EAAAxJ,EAAA,GAAAsJ,EAAAE,EAAArI,EAGH7C,KAAKwF,cAAc,mBAAoB,6BAA8B,CACnEsB,MAAOkE,EAAMrF,QACbwE,UAAWa,EAAMZ,OAGfU,EAAe,wBACfrC,EAAY,UAEG,cAAfuC,EAAMZ,MAAwBY,EAAMrF,QAAQ4E,SAAS,UACvDO,EAAe,wFACfrC,EAAY,gBACY,eAAfuC,EAAMZ,MACfU,EAAe,+EACfrC,EAAY,gBACHuC,EAAMrF,QAAQ4E,SAAS,oBAChCO,EAAe,0FACfrC,EAAY,oBAEZqC,EAAe,0BAAHrF,OAA6BuF,EAAMrF,SAC/C8C,EAAYuC,EAAMZ,MAAQ,gBAC3Bc,EAAApI,EAAA,EAEM,CACL2G,SAAS,EACT9D,QAASmF,EACThE,MAAO2B,IACR,eAAAyC,EAAApI,EAAA,KAAA2H,EAAA,wBAEJ,SAtGiBoB,EAAAC,GAAA,OAAAtB,EAAA/F,MAAC,KAADD,UAAA,IAwGlB,CAAAM,IAAA,2BAAA1B,OAAA2I,EAAAxH,EAAAX,IAAA/D,EAGA,SAAAmM,IAAA,IAAA5D,EAAAG,EAAA,OAAA3E,IAAAC,EAAA,SAAAoI,GAAA,cAAAA,EAAA/J,GAAA,UACOlC,KAAKmL,YAAa,CAAFc,EAAA/J,EAAA,cACb,IAAIV,MAAM,qCAAoC,cAAAyK,EAAA/J,EAAA,EAG/B2G,MAAM,GAADpD,OAAIzF,KAAKuF,SAAQ,yBAAyB,CACpEuD,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBf,IAAKnI,KAAKqF,cACVqF,UAAW1K,KAAKmL,YAAYT,UAC5BC,SAAU3K,KAAKmL,YAAYR,SAC3BC,aAAc5K,KAAKmL,YAAYP,aAC/BC,gBAAiB7K,KAAKmL,YAAYN,gBAClC/E,WAAW,IAAIC,MAAOC,kBAExB,OAbY,IAARoC,EAAQ6D,EAAApJ,GAeA0G,GAAI,CAAF0C,EAAA/J,EAAA,eAAA+J,EAAA/J,EAAA,EACUkG,EAASoB,OAAOU,MAAM,iBAAO,CAAC,CAAC,GAAE,OAA1C,MAAT3B,EAAS0D,EAAApJ,EACT,IAAIrB,MAAM,gCAADiE,OAAiC8C,EAAUzB,OAASsB,EAASkB,aAAa,cAAA2C,EAAAnJ,EAAA,KAAAkJ,EAAA,SAE5F,WAxBqC,OAAAD,EAAAtH,MAAC,KAADD,UAAA,IA0BtC,CAAAM,IAAA,gBAAA1B,MAAA,eAAA8I,EAAA3H,EAAAX,IAAA/D,EAGA,SAAAsM,EAAoBC,GAAqB,IAAAC,EAAAC,EAAAC,EAAAnE,EAAAxC,EAAA2C,EAAAiE,EAAA,OAAA5I,IAAAC,EAAA,SAAA4I,GAAA,cAAAA,EAAA/K,EAAA+K,EAAAvK,GAAA,UAClClC,KAAK2H,WAAc3H,KAAKmL,YAAW,CAAAsB,EAAAvK,EAAA,eAAAuK,EAAA3J,EAAA,EAC/B,CACL2G,SAAS,EACT9D,QAAS,gDACTmB,MAAO,0BACP4F,eAAgB,GAChBC,aAAc,IACf,OAOE,OAPFF,EAAA/K,EAAA,EAID1B,KAAKwF,cAAc,qBAAsB,sCAAuC,CAC9E4G,YAAAA,EACA/G,cAAerF,KAAKqF,gBACnBoH,EAAAvK,EAAA,EAEoB2G,MAAM,GAADpD,OAAIzF,KAAKuF,SAAQ,oBAAoB,CAC/DuD,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBC,SAAUnJ,KAAKqF,cACfuH,aAAcR,EACdhB,SAA0B,QAAlBiB,EAAErM,KAAKmL,mBAAW,IAAAkB,OAAA,EAAhBA,EAAkB3B,UAC5BC,SAA0B,QAAlB2B,EAAEtM,KAAKmL,mBAAW,IAAAmB,OAAA,EAAhBA,EAAkB3B,SAC5BU,eAA+B,QAAhBkB,EAAAvM,KAAKmL,mBAAW,IAAAoB,OAAA,EAAhBA,EAAkB3B,eAAgB,WAEnD,OAKC,GAjBGxC,EAAQqE,EAAA5J,EAcd7C,KAAKwF,cAAc,wBAAyB,iCAAkC,CAC5E6D,OAAQjB,EAASiB,OACjBC,WAAYlB,EAASkB,cAGnBlB,EAASmB,GAAI,CAAFkD,EAAAvK,EAAA,eAAAuK,EAAAvK,EAAA,EACMkG,EAASoB,OAAM,OAI/B,OAJG5D,EAAI6G,EAAA5J,EACV7C,KAAKwF,cAAc,uBAAwB,0BAA2B,CACpEqH,YAAajH,EAAK+G,aAClBG,cAAelH,EAAK8G,iBACnBD,EAAA3J,EAAA,EAEI,CACL2G,SAAS,EACT9D,QAASC,EAAKD,SAAW,SAAJF,OAAaG,EAAK+G,aAAY,YACnDD,eAAgB9G,EAAK8G,gBAAkB,GACvCC,aAAc/G,EAAK+G,cAAgB,IACpC,cAAAF,EAAAvK,EAAA,EAEuBkG,EAASoB,OAAOU,MAAM,iBAAO,CAAC,CAAC,GAAE,OAItD,OAJG3B,EAASkE,EAAA5J,EACf7C,KAAKwF,cAAc,sBAAuB,sBAAuB,CAC/D6D,OAAQjB,EAASiB,OACjBd,UAAAA,IACCkE,EAAA3J,EAAA,EAEI,CACL2G,SAAS,EACT9D,QAAS4C,EAAU5C,SAAW,6BAAJF,OAAiC2C,EAASiB,QACpEvC,MAAOyB,EAAUzB,OAAS,QAAJrB,OAAY2C,EAASiB,QAC3CqD,eAAgB,GAChBC,aAAc,IACf,OAAAF,EAAAvK,EAAA,eAMA,OANAuK,EAAA/K,EAAA,EAAA8K,EAAAC,EAAA5J,EAGH7C,KAAKwF,cAAc,qBAAsB,qBAAsB,CAC7DsB,MAAO0F,EAAM7G,QACbwE,UAAWqC,EAAMpC,OAChBqC,EAAA3J,EAAA,EAEI,CACL2G,SAAS,EACT9D,QAAS,yBAAFF,OAA2B+G,EAAM7G,SACxCmB,MAAO0F,EAAM7G,QACb+G,eAAgB,GAChBC,aAAc,IACf,cAAAF,EAAA3J,EAAA,KAAAqJ,EAAA,iBA5Ec,OA8ElB,SA9EkBY,GAAA,OAAAb,EAAAzH,MAAC,KAADD,UAAA,EAHnB,IAmFA,CAAAM,IAAA,uBAAA1B,OAAA4J,EAAAzI,EAAAX,IAAA/D,EAGA,SAAAoN,EAA2Bb,EAAuBlE,EAAmBgF,GAAe,IAAAC,EAAAC,EAAAC,EAAAC,EAAAlF,EAAAmF,EAAA3H,EAAA2C,EAAAiF,EAAAC,EAAAjJ,UAAA,OAAAZ,IAAAC,EAAA,SAAA6J,GAAA,cAAAA,EAAAhM,EAAAgM,EAAAxL,GAAA,OAQ7E,OAR+EiL,EAAYM,EAAApM,OAAA,QAAA5B,IAAAgO,EAAA,GAAAA,EAAA,GAAG,QAAOC,EAAAhM,EAAA,EAExG1B,KAAKwF,cAAc,0BAA2B,kDAAmD,CAC/F4G,YAAAA,EACAlE,UAAAA,EACAgF,QAAAA,EACAC,KAAAA,EACA9H,cAAerF,KAAKqF,gBACnBqI,EAAAxL,EAAA,EAEoB2G,MAAM,GAADpD,OAAIzF,KAAKuF,SAAQ,kBAAkB,CAC7DuD,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBC,SAAUnJ,KAAKqF,cACfuH,aAAcR,EACduB,WAAYzF,EACZ0F,SAAUV,EACVC,KAAMA,EACN/B,SAA0B,QAAlBgC,EAAEpN,KAAKmL,mBAAW,IAAAiC,OAAA,EAAhBA,EAAkB1C,UAC5BC,SAA0B,QAAlB0C,EAAErN,KAAKmL,mBAAW,IAAAkC,OAAA,EAAhBA,EAAkB1C,SAC5BU,eAA+B,QAAhBiC,EAAAtN,KAAKmL,mBAAW,IAAAmC,OAAA,EAAhBA,EAAkB1C,eAAgB,WAEnD,OAKC,GApBGxC,EAAQsF,EAAA7K,EAiBd7C,KAAKwF,cAAc,6BAA8B,0CAA2C,CAC1F6D,OAAQjB,EAASiB,OACjBC,WAAYlB,EAASkB,cAGnBlB,EAASmB,GAAI,CAAFmE,EAAAxL,EAAA,eAAAwL,EAAAxL,EAAA,EACMkG,EAASoB,OAAM,OAK/B,OALG5D,EAAI8H,EAAA7K,EACV7C,KAAKwF,cAAc,4BAA6B,mCAAoC,CAClFqH,YAAajH,EAAK+G,aAClBkB,YAAqB,QAATN,EAAA3H,EAAKA,YAAI,IAAA2H,OAAA,EAATA,EAAWlM,SAAU,EACjCyM,YAAalI,EAAKmI,eACjBL,EAAA5K,EAAA,EAEI,CACL2G,SAAS,EACT9D,QAASC,EAAKD,SAAW,mCAAJF,OAAuCG,EAAK+G,aAAY,YAC7ED,eAAgB9G,EAAK8G,gBAAkB,GACvC9G,KAAMA,EAAKA,MAAQ,GACnBmI,aAAcnI,EAAKmI,cAAgB,GACnCC,WAAYpI,EAAKoI,YAAc,GAC/BrB,aAAc/G,EAAK+G,cAAgB,EACnCsB,WAAY,CACVC,MAAOhG,EACPiG,IAAKjB,EACLC,KAAMA,KAET,cAAAO,EAAAxL,EAAA,EAEuBkG,EAASoB,OAAOU,MAAM,iBAAO,CAAC,CAAC,GAAE,OAItD,OAJG3B,EAASmF,EAAA7K,EACf7C,KAAKwF,cAAc,2BAA4B,+BAAgC,CAC7E6D,OAAQjB,EAASiB,OACjBd,UAAAA,IACCmF,EAAA5K,EAAA,EAEI,CACL2G,SAAS,EACT9D,QAAS4C,EAAU5C,SAAW,sCAAJF,OAA0C2C,EAASiB,QAC7EvC,MAAOyB,EAAUzB,OAAS,QAAJrB,OAAY2C,EAASiB,QAC3CqD,eAAgB,GAChB9G,KAAM,GACNmI,aAAc,GACdC,WAAY,GACZrB,aAAc,EACdsB,WAAY,CAAEC,MAAOhG,EAAWiG,IAAKjB,EAASC,KAAAA,KAC/C,OAAAO,EAAAxL,EAAA,eAMA,OANAwL,EAAAhM,EAAA,EAAA8L,EAAAE,EAAA7K,EAGH7C,KAAKwF,cAAc,0BAA2B,8BAA+B,CAC3EsB,MAAO0G,EAAM7H,QACbwE,UAAWqD,EAAMpD,OAChBsD,EAAA5K,EAAA,EAEI,CACL2G,SAAS,EACT9D,QAAS,qCAAFF,OAAuC+H,EAAM7H,SACpDmB,MAAO0G,EAAM7H,QACb+G,eAAgB,GAChB9G,KAAM,GACNmI,aAAc,GACdC,WAAY,GACZrB,aAAc,EACdsB,WAAY,CAAEC,MAAOhG,EAAWiG,IAAKjB,EAASC,KAAAA,KAC/C,cAAAO,EAAA5K,EAAA,KAAAmK,EAAA,iBAEJ,SA3FyBmB,EAAAC,EAAAC,GAAA,OAAAtB,EAAAvI,MAAC,KAADD,UAAA,IA6F1B,CAAAM,IAAA,gBAAA1B,MAGA,WAA6D,IAAAmL,EAC3D,MAAO,CACL7G,kBAAmB1H,KAAK2H,UACxB6D,KAAsB,QAAlB+C,EAAEvO,KAAKmL,mBAAW,IAAAoD,OAAA,EAAhBA,EAAkB7D,UAE5B,GAEA,CAAA5F,IAAA,SAAA1B,OAAAoL,EAAAjK,EAAAX,IAAA/D,EAGA,SAAA4O,IAAA,IAAAC,EAAAtG,EAAAuG,EAAAC,EAAA,OAAAhL,IAAAC,EAAA,SAAAgL,GAAA,cAAAA,EAAAnN,EAAAmN,EAAA3M,GAAA,UAAA2M,EAAAnN,EAAA,GAEQ1B,KAAK2H,UAAW,CAAFkH,EAAA3M,EAAA,QACsD,OAAtElC,KAAKwF,cAAc,qBAAsB,6BAA6BqJ,EAAA3M,EAAA,EAE/C2G,MAAM,GAADpD,OAAIzF,KAAKuF,SAAQ,kBAAkB,CAC7DuD,OAAQ,SACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBC,SAAUnJ,KAAKqF,cACf+F,SAA0B,QAAlBsD,EAAE1O,KAAKmL,mBAAW,IAAAuD,OAAA,EAAhBA,EAAkBhE,cAE9B,OATItC,EAAQyG,EAAAhM,EAWd7C,KAAKwF,cAAc,wBAAyB,iCAAkC,CAC5E6D,OAAQjB,EAASiB,OACjBC,WAAYlB,EAASkB,aACpB,cAAAuF,EAAAnN,EAAA,EAAAmN,EAAA3M,EAAA,EAKG2G,MAAM,GAADpD,OAAIzF,KAAKuF,SAAQ,yBAAyB,CACnDuD,OAAQ,SACRC,QAAS,CACP,eAAgB,sBAElB,OAAA8F,EAAA3M,EAAA,eAAA2M,EAAAnN,EAAA,EAAAiN,EAAAE,EAAAhM,EAEF8I,QAAQC,KAAK,4CAA2C+C,GACxD,OAAAE,EAAA3M,EAAA,eAAA2M,EAAAnN,EAAA,EAAAkN,EAAAC,EAAAhM,EAGF7C,KAAKwF,cAAc,qBAAsB,qBAAsB,CAC7DsB,MAAO8H,EAAMjJ,UACZ,OAGqB,OAHrBkJ,EAAAnN,EAAA,EAEH1B,KAAK2H,UAAY,KACjB3H,KAAKmL,YAAc,KAAK0D,EAAAnM,EAAA,iBAAAmM,EAAA/L,EAAA,KAAA2L,EAAA,2BAE3B,WA1CW,OAAAD,EAAA/J,MAAC,KAADD,UAAA,IA4CZ,CAAAM,IAAA,iBAAA1B,MAGA,WACE,OAAOpD,KAAKmL,WACd,GAEA,CAAArG,IAAA,iBAAA1B,MAGA,SAAe+H,GACbnL,KAAKmL,YAAcA,CACrB,IAtqBFnJ,GAAA4C,EAAA1E,EAAAM,UAAAwB,GAAAzB,OAAAuD,eAAA5D,EAAA,aAAAgE,UAAA,IAAAhE,EAAA,IAAAA,EAAA8B,EA2mBEwM,EA1GAxB,EAhHAjB,EA3GAvB,EAhIAxC,CAggBC,CArmBuB,G,aCjE1B,IAAA9H,EAAA6B,EAAAC,EAAA,mBAAAC,OAAAA,OAAA,GAAAC,EAAAF,EAAAG,UAAA,aAAA/B,EAAA4B,EAAAI,aAAA,yBAAAd,EAAAU,EAAAE,EAAA9B,EAAAkB,GAAA,IAAAe,EAAAH,GAAAA,EAAA1B,qBAAA8B,EAAAJ,EAAAI,EAAAC,EAAAhC,OAAAiC,OAAAH,EAAA7B,WAAA,OAAAiC,EAAAF,EAAA,mBAAAP,EAAAE,EAAA9B,GAAA,IAAAkB,EAAAe,EAAAE,EAAAG,EAAA,EAAAhB,EAAAtB,GAAA,GAAAuC,GAAA,EAAAC,EAAA,CAAAlB,EAAA,EAAAQ,EAAA,EAAAW,EAAA3C,EAAA4C,EAAAC,EAAAL,EAAAK,EAAAC,KAAA9C,EAAA,GAAA6C,EAAA,SAAAhB,EAAAC,GAAA,OAAAV,EAAAS,EAAAM,EAAA,EAAAE,EAAArC,EAAA0C,EAAAV,EAAAF,EAAAc,CAAA,YAAAC,EAAAf,EAAAE,GAAA,IAAAG,EAAAL,EAAAO,EAAAL,EAAAH,EAAA,GAAAY,GAAAD,IAAAtC,GAAA2B,EAAAL,EAAAL,OAAAU,IAAA,KAAA3B,EAAAkB,EAAAI,EAAAK,GAAAgB,EAAAH,EAAAlB,EAAAuB,EAAA3B,EAAA,GAAAU,EAAA,GAAA5B,EAAA6C,IAAAf,KAAAK,EAAAjB,GAAAe,EAAAf,EAAA,OAAAe,EAAA,MAAAf,EAAA,GAAAA,EAAA,GAAApB,GAAAoB,EAAA,IAAAyB,KAAA3C,EAAA4B,EAAA,GAAAe,EAAAzB,EAAA,KAAAe,EAAA,EAAAO,EAAAC,EAAAX,EAAAU,EAAAV,EAAAZ,EAAA,IAAAyB,EAAAE,IAAA7C,EAAA4B,EAAA,GAAAV,EAAA,GAAAY,GAAAA,EAAAe,KAAA3B,EAAA,GAAAU,EAAAV,EAAA,GAAAY,EAAAU,EAAAV,EAAAe,EAAAZ,EAAA,OAAAjC,GAAA4B,EAAA,SAAAc,EAAA,MAAAH,GAAA,EAAAT,CAAA,iBAAA9B,EAAAsB,EAAAuB,GAAA,GAAAP,EAAA,QAAAQ,UAAA,oCAAAP,GAAA,IAAAjB,GAAAqB,EAAArB,EAAAuB,GAAAZ,EAAAX,EAAAa,EAAAU,GAAAlB,EAAAM,EAAA,EAAAnC,EAAAqC,KAAAI,GAAA,CAAArB,IAAAe,EAAAA,EAAA,GAAAA,EAAA,IAAAO,EAAAV,GAAA,GAAAa,EAAAV,EAAAE,IAAAK,EAAAV,EAAAK,EAAAK,EAAAC,EAAAN,GAAA,OAAAG,EAAA,EAAApB,EAAA,IAAAe,IAAAjC,EAAA,QAAA2B,EAAAT,EAAAlB,GAAA,MAAA2B,EAAAA,EAAArB,KAAAY,EAAAiB,IAAA,MAAAW,UAAA,wCAAAnB,EAAAoB,KAAA,OAAApB,EAAAQ,EAAAR,EAAAqB,MAAAf,EAAA,IAAAA,EAAA,YAAAA,IAAAN,EAAAT,EAAA+B,SAAAtB,EAAArB,KAAAY,GAAAe,EAAA,IAAAE,EAAAW,UAAA,oCAAA9C,EAAA,YAAAiC,EAAA,GAAAf,EAAApB,CAAA,UAAA6B,GAAAY,EAAAC,EAAAV,EAAA,GAAAK,EAAAP,EAAAtB,KAAAwB,EAAAU,MAAAE,EAAA,YAAAf,GAAAT,EAAApB,EAAAmC,EAAA,EAAAE,EAAAR,CAAA,SAAAW,EAAA,UAAAU,MAAArB,EAAAoB,KAAAR,EAAA,GAAAX,EAAA5B,EAAAkB,IAAA,GAAAiB,CAAA,KAAAO,EAAA,YAAAR,IAAA,UAAAgB,IAAA,UAAAC,IAAA,CAAAxB,EAAAxB,OAAAiD,eAAA,IAAAnB,EAAA,GAAAH,GAAAH,EAAAA,EAAA,GAAAG,QAAAO,EAAAV,EAAA,GAAAG,EAAA,yBAAAH,GAAAQ,EAAAgB,EAAA/C,UAAA8B,EAAA9B,UAAAD,OAAAiC,OAAAH,GAAA,SAAAK,EAAAxC,GAAA,OAAAK,OAAAkD,eAAAlD,OAAAkD,eAAAvD,EAAAqD,IAAArD,EAAAwD,UAAAH,EAAAd,EAAAvC,EAAAE,EAAA,sBAAAF,EAAAM,UAAAD,OAAAiC,OAAAD,GAAArC,CAAA,QAAAoD,EAAA9C,UAAA+C,EAAAd,EAAAF,EAAA,cAAAgB,GAAAd,EAAAc,EAAA,cAAAD,GAAAA,EAAAK,YAAA,oBAAAlB,EAAAc,EAAAnD,EAAA,qBAAAqC,EAAAF,GAAAE,EAAAF,EAAAnC,EAAA,aAAAqC,EAAAF,EAAAL,EAAA,yBAAAO,EAAAF,EAAA,oDAAAqB,EAAA,kBAAAC,EAAAvC,EAAAzB,EAAA6C,EAAA,cAAAD,EAAAvC,EAAA8B,EAAAE,EAAAH,GAAA,IAAAT,EAAAf,OAAAuD,eAAA,IAAAxC,EAAA,gBAAApB,GAAAoB,EAAA,EAAAmB,EAAA,SAAAvC,EAAA8B,EAAAE,EAAAH,GAAA,SAAA3B,EAAA4B,EAAAE,GAAAO,EAAAvC,EAAA8B,EAAA,SAAA9B,GAAA,YAAA6D,QAAA/B,EAAAE,EAAAhC,EAAA,GAAA8B,EAAAV,EAAAA,EAAApB,EAAA8B,EAAA,CAAAoB,MAAAlB,EAAA8B,YAAAjC,EAAAkC,cAAAlC,EAAAmC,UAAAnC,IAAA7B,EAAA8B,GAAAE,GAAA9B,EAAA,UAAAA,EAAA,WAAAA,EAAA,cAAAqC,EAAAvC,EAAA8B,EAAAE,EAAAH,EAAA,UAAAoC,EAAAjC,EAAAH,EAAA7B,EAAA8B,EAAA5B,EAAA0C,EAAAT,GAAA,QAAAf,EAAAY,EAAAY,GAAAT,GAAAE,EAAAjB,EAAA8B,KAAA,OAAAlB,GAAA,YAAAhC,EAAAgC,EAAA,CAAAZ,EAAA6B,KAAApB,EAAAQ,GAAA6B,QAAAC,QAAA9B,GAAA+B,KAAAtC,EAAA5B,EAAA,UAAAmE,EAAArC,GAAA,sBAAAH,EAAA,KAAA7B,EAAAsE,UAAA,WAAAJ,QAAA,SAAApC,EAAA5B,GAAA,IAAA0C,EAAAZ,EAAAuC,MAAA1C,EAAA7B,GAAA,SAAAwE,EAAAxC,GAAAiC,EAAArB,EAAAd,EAAA5B,EAAAsE,EAAAC,EAAA,OAAAzC,EAAA,UAAAyC,EAAAzC,GAAAiC,EAAArB,EAAAd,EAAA5B,EAAAsE,EAAAC,EAAA,QAAAzC,EAAA,CAAAwC,OAAA,MAaA,IAAIoK,EAAgB,aAGhBC,EAAmC,KAEvC,SACeC,IAAe,OAAAC,EAAAxK,MAAC,KAADD,UAAA,CAqB9B,SAAAyK,IAFC,OAEDA,EAAA1K,EAAAX,IAAA/D,EArBA,SAAAmM,IAAA,IAAA5D,EAAA8G,EAAA,OAAAtL,IAAAC,EAAA,SAAAoI,GAAA,cAAAA,EAAAvK,EAAAuK,EAAA/J,GAAA,cAAA+J,EAAAvK,EAAA,EAAAuK,EAAA/J,EAAA,EAGyB2G,MAAM,kBAAiB,OAAhC,IAART,EAAQ6D,EAAApJ,GAEE0G,GAAI,CAAF0C,EAAA/J,EAAA,eAAA+J,EAAA/J,EAAA,EAEG2G,MAAM,oDAAmD,OAA1ET,EAAQ6D,EAAApJ,EAAA,WAGNuF,EAASmB,GAAI,CAAF0C,EAAA/J,EAAA,eAAA+J,EAAA/J,EAAA,EACakG,EAASoB,OAAM,OAAnC0F,EAAWjD,EAAApJ,EACjBiM,EAAgBI,EAAYC,QAAQlD,EAAA/J,EAAA,eAEpC4M,EAAgB,2BAA2B,OAAA7C,EAAA/J,EAAA,eAAA+J,EAAAvK,EAAA,EAAAuK,EAAApJ,EAG7CiM,EAAgB,2BAA2B,cAAA7C,EAAAnJ,EAAA,KAAAkJ,EAAA,kBAE9CvH,MAAA,KAAAD,UAAA,CAiCD,SAAS4K,IACP,IAAMC,EAAkBvO,SAASwO,eAAe,gBAC1CC,EAAYzO,SAASwO,eAAe,UACpCE,EAAmB1O,SAASwO,eAAe,kBAC3CG,EAAc3O,SAASwO,eAAe,aAExCD,IACFA,EAAgBK,QAAUC,GAGxBJ,IACFA,EAAUG,QAAUE,GAGlBJ,IACFA,EAAiBE,QAAUG,GAGzBJ,IACFA,EAAYC,QAAUI,GAmM1B,WACE,IAAMC,EAAQC,aAAaC,QAAQ,oBACnC,GAAIF,EACF,IACE,IAAM5E,EAAclC,KAAKiH,MAAMH,GAG9BjP,SAASwO,eAAe,YAAiClM,MAAQ+H,EAAYhD,KAAO,GACpFrH,SAASwO,eAAe,mBAAwClM,MAAQ+H,EAAYT,WAAa,GACjG5J,SAASwO,eAAe,iBAAsClM,MAAQ+H,EAAYR,UAAY,GAG/F,IAAM7E,EAAY,IAAIC,KAAKoF,EAAYrF,aAC3B,IAAIC,MACOoK,UAAYrK,EAAUqK,WAAa,KAE1C,IAEdC,GAAa,GACbC,EAAe,0BAA2B,QAGtClF,EAAYhD,MACd4G,EAAa,IAAI3J,EAAc+F,EAAYhD,OAI7C6H,aAAaM,WAAW,mBAE5B,CAAE,MAAOxJ,GACPkJ,aAAaM,WAAW,mBAC1B,CAEJ,CAhOEC,GAGAF,EAAe,mBAAD5K,OAAoBqJ,GAAiB,OACrD,CAAC,SAGca,IAAoB,OAAAa,EAAA/L,MAAC,KAADD,UAAA,UAAAgM,IAgClC,OAhCkCA,EAAAjM,EAAAX,IAAA/D,EAAnC,SAAAsM,IAAA,IAAAsE,EAAAC,EAAAC,EAAAxI,EAAAuC,EAAAC,EAAAiG,EAAA7F,EAAA,OAAAnH,IAAAC,EAAA,SAAA4I,GAAA,cAAAA,EAAA/K,EAAA+K,EAAAvK,GAAA,OAGwF,GAFhFiG,EAA0C,QAAvCsI,EAAI3P,SAASwO,eAAe,mBAAW,IAAAmB,OAAA,EAApCA,EAA2DrN,MACjEsH,EAAuD,QAA9CgG,EAAI5P,SAASwO,eAAe,0BAAkB,IAAAoB,OAAA,EAA3CA,EAAkEtN,MAC9EuH,EAAoD,QAA5CgG,EAAI7P,SAASwO,eAAe,wBAAgB,IAAAqB,OAAA,EAAzCA,EAAgEvN,MAE5E+E,GAAQuC,GAAcC,EAAQ,CAAA8B,EAAAvK,EAAA,QAC6B,OAA9DmO,EAAe,qCAAsC,SAAS5D,EAAA3J,EAAA,UAU7D,OANHuN,EAAe,oBAAqB,WAAW5D,EAAA/K,EAAA,EAIxCqN,IACHA,EAAa,IAAI3J,EAAc+C,IAChCsE,EAAAvK,EAAA,EAEoB6M,EAAW8B,aAAanG,EAAWC,EAAU,QAAQ,GAAM,QAA1EiG,EAAMnE,EAAA5J,GAED4G,SACT4G,EAAe,4BAA6B,WAC5CS,EAAgB3I,EAAKuC,EAAWC,GAChCyF,GAAa,GAEbW,EAAiB,OAAQH,IAEzBP,EAAeO,EAAOjL,QAAS,SAChC8G,EAAAvK,EAAA,eAAAuK,EAAA/K,EAAA,EAAAqJ,EAAA0B,EAAA5J,EAEDwN,EAAe,0BAAD5K,OAAAsF,GAAoC,SAAS,cAAA0B,EAAA3J,EAAA,KAAAqJ,EAAA,kBAE9D1H,MAAA,KAAAD,UAAA,UAEcqL,IAAa,OAAA3D,EAAAzH,MAAC,KAADD,UAAA,UAAA0H,IAsC3B,OAtC2BA,EAAA3H,EAAAX,IAAA/D,EAA5B,SAAAoN,IAAA,IAAA+D,EAAAC,EAAA7E,EAAAwE,EAAA5F,EAAA,OAAApH,IAAAC,EAAA,SAAA6J,GAAA,cAAAA,EAAAhM,EAAAgM,EAAAxL,GAAA,OAC+F,GAAvF+O,EAA2D,QAA3CD,EAAIlQ,SAASwO,eAAe,uBAAe,IAAA0B,OAAA,EAAxCA,EAA+D5N,MAEjE,CAAFsK,EAAAxL,EAAA,QACgD,OAAnEmO,EAAe,0CAA2C,SAAS3C,EAAA5K,EAAA,UAIwB,GAElE,KAFrBsJ,EAAc6E,EAAiBC,MAAM,KAAKC,IAAI,SAAA/G,GAAI,OAAIA,EAAKgH,MAAM,GAAEC,OAAO,SAAAjH,GAAI,OAAIA,CAAI,IAE5E/I,OAAY,CAAAqM,EAAAxL,EAAA,QACiC,OAA3DmO,EAAe,kCAAmC,SAAS3C,EAAA5K,EAAA,UAIP,GAAtDuN,EAAe,2BAA4B,WAAW3C,EAAAhM,EAAA,EAI/CqN,EAAY,CAAFrB,EAAAxL,EAAA,QAC2C,OAAxDmO,EAAe,+BAAgC,SAAS3C,EAAA5K,EAAA,iBAAA4K,EAAAxL,EAAA,EAIrC6M,EAAWc,cAAczD,GAAY,QAApDwE,EAAMlD,EAAA7K,GAED4G,SACT4G,EAAe,SAAD5K,OAAUmL,EAAOjE,aAAY,YAAY,WAEvDoE,EAAiB,SAAUH,GAE3BU,EAAqBV,EAAOlE,iBAE5B2D,EAAeO,EAAOjL,QAAS,SAChC+H,EAAAxL,EAAA,eAAAwL,EAAAhM,EAAA,EAAAsJ,EAAA0C,EAAA7K,EAEDwN,EAAe,yBAAD5K,OAAAuF,GAAmC,SAAS,cAAA0C,EAAA5K,EAAA,KAAAmK,EAAA,kBAE7DxI,MAAA,KAAAD,UAAA,UAEcsL,IAAc,OAAAyB,EAAA9M,MAAC,KAADD,UAAA,UAAA+M,IA0C5B,OA1C4BA,EAAAhN,EAAAX,IAAA/D,EAA7B,SAAA4O,IAAA,IAAA+C,EAAAC,EAAAC,EAAAC,EAAAV,EAAAW,EAAAC,EAAAC,EAAA1F,EAAAe,EAAAyD,EAAApE,EAAA,OAAA5I,IAAAC,EAAA,SAAAgL,GAAA,cAAAA,EAAAnN,EAAAmN,EAAA3M,GAAA,OAIyF,GAHjF+O,EAA2D,QAA3CO,EAAI1Q,SAASwO,eAAe,uBAAe,IAAAkC,OAAA,EAAxCA,EAA+DpO,MAClFwO,EAAuD,QAAzCH,EAAI3Q,SAASwO,eAAe,qBAAa,IAAAmC,OAAA,EAAtCA,EAA6DrO,MAC9EyO,EAAmD,QAAvCH,EAAI5Q,SAASwO,eAAe,mBAAW,IAAAoC,OAAA,EAApCA,EAA2DtO,MAC1E0O,EAAqD,QAA5CH,EAAI7Q,SAASwO,eAAe,wBAAgB,IAAAqC,OAAA,EAAzCA,EAAgEvO,MAE7E6N,GAAqBW,GAAmBC,EAAY,CAAAhD,EAAA3M,EAAA,QACO,OAA9DmO,EAAe,qCAAsC,SAASxB,EAAA/L,EAAA,UAK/B,GAD3BsJ,EAAc6E,EAAiBC,MAAM,KAAKC,IAAI,SAAA/G,GAAI,OAAIA,EAAKgH,MAAM,GAAEC,OAAO,SAAAjH,GAAI,OAAIA,CAAI,GACtF+C,EAAO2E,GAAa,QAEC,IAAvB1F,EAAY/K,OAAY,CAAAwN,EAAA3M,EAAA,QACiC,OAA3DmO,EAAe,kCAAmC,SAASxB,EAAA/L,EAAA,UAIT,GAApDuN,EAAe,yBAA0B,WAAWxB,EAAAnN,EAAA,EAI7CqN,EAAY,CAAFF,EAAA3M,EAAA,QAC2C,OAAxDmO,EAAe,+BAAgC,SAASxB,EAAA/L,EAAA,iBAAA+L,EAAA3M,EAAA,EAIrC6M,EAAWgD,qBAAqB3F,EAAawF,EAAgBC,EAAc1E,GAAK,QAA/FyD,EAAM/B,EAAAhM,GAED4G,SACT4G,EAAe,sBAAD5K,OAAuBmL,EAAOjE,aAAY,YAAY,WAEpEoE,EAAiB,OAAQH,GAEzBoB,EAAmBpB,IAEnBP,EAAeO,EAAOjL,QAAS,SAChCkJ,EAAA3M,EAAA,eAAA2M,EAAAnN,EAAA,EAAA8K,EAAAqC,EAAAhM,EAEDwN,EAAe,0BAAD5K,OAAA+G,GAAoC,SAAS,cAAAqC,EAAA/L,EAAA,KAAA2L,EAAA,kBAE9DhK,MAAA,KAAAD,UAAA,CAED,SAASoL,IAEPI,aAAaM,WAAW,oBAGpBvB,GACFA,EAAWkD,SAIb7B,GAAa,GACbC,EAAe,0BAA2B,QAGzCvP,SAASwO,eAAe,YAAiClM,MAAQ,GACjEtC,SAASwO,eAAe,mBAAwClM,MAAQ,GACxEtC,SAASwO,eAAe,iBAAsClM,MAAQ,EACzE,CAEA,SAASiN,EAAe1K,EAAiBuM,GACvC,IAAMC,EAAgBrR,SAASwO,eAAe,eAC1C6C,IACFA,EAAcC,YAAczM,EAC5BwM,EAAcE,UAAY,eAAH5M,OAAkByM,GAE7C,CAEA,SAAS9B,EAAa1I,GACpB,IAAM4K,EAAUxR,SAASwO,eAAe,gBAClCC,EAAYzO,SAASwO,eAAe,UACpCiD,EAAWzR,SAASwO,eAAe,YACnCkD,EAAiB1R,SAASwO,eAAe,mBACzCmD,EAAgB3R,SAASwO,eAAe,iBAE1C5H,GACF4K,EAAQI,MAAMC,QAAU,OACxBpD,EAAUmD,MAAMC,QAAU,eAG1BJ,EAASK,UAAW,EACpBJ,EAAeI,UAAW,EAC1BH,EAAcG,UAAW,IAEzBN,EAAQI,MAAMC,QAAU,eACxBpD,EAAUmD,MAAMC,QAAU,OAG1BJ,EAASK,UAAW,EACpBJ,EAAeI,UAAW,EAC1BH,EAAcG,UAAW,EAE7B,CAEA,SAAS9B,EAAgB3I,EAAauC,EAAmBC,EAAkBkI,GACzE,IAAM1H,EAAc,CAClBhD,IAAAA,EACAuC,UAAAA,EACAC,SAAAA,EACAkI,WAAW,EACX/M,WAAW,IAAIC,MAAOC,eAGxBgK,aAAa8C,QAAQ,mBAAoB7J,KAAKC,UAAUiC,GAC1D,CAuCA,SAAS4F,EAAiBgC,EAAuBnN,GAC/C,IACE,IAAMoN,EAAW/J,KAAKC,UAAUtD,GAC1BqN,EAAc,uBAAHxN,OAA0BsN,EAAa,SAAAtN,OAAOuN,EAAQ,MAEvEE,MAAMC,IAAG,eAAAC,EAAA7O,EAAAX,IAAA/D,EAAC,SAAA4K,EAAO9D,GAAO,OAAA/C,IAAAC,EAAA,SAAAqH,GAAA,cAAAA,EAAAhJ,GAAA,OAGS,OAFbyE,EAAQ0M,SAASC,WAAWC,qBACtBC,SAAS,MAC3BC,OAAS,CAAC,CAACR,IAAc/H,EAAAhJ,EAAA,EACzByE,EAAQ+M,OAAM,cAAAxI,EAAApI,EAAA,KAAA2H,EAAA,IACrB,gBAAAoB,GAAA,OAAAuH,EAAA3O,MAAA,KAAAD,UAAA,EALQ,IAKN0F,MAAM,SAAApD,GACP,EAEJ,CAAE,MAAOA,GACP,CAEJ,CAGA,SAASwK,EAAqBqC,GAC5B,IAAMC,EAAa9S,SAASwO,eAAe,kBAC3C,GAAIsE,GAAcD,EAAQtS,OAAS,EAAG,CACpC,IAAIwS,EAAO,+BAAHpO,OACgBkO,EAAQtS,OAAM,0UAetCsS,EAAQvK,QAAQ,SAAAwH,GACdiD,GAAQ,iCAAJpO,OAEMmL,EAAOkD,eAAiBlD,EAAOmD,MAAQ,MAAK,yBAAAtO,OAC5CmL,EAAOmD,MAAQ,MAAK,yBAAAtO,OACpBmL,EAAOoD,IAAM,YAAW,yBAAAvO,OACxBmL,EAAOqD,MAAQ,MAAK,yBAAAxO,OACpBmL,EAAOsD,QAAU,UAAS,+BAGtC,GAEAL,GAAQ,6DAMRD,EAAWO,UAAYN,CACzB,CACF,CAGA,SAAS7B,EAAmBpB,GAC1B,IAAMgD,EAAa9S,SAASwO,eAAe,gBAC3C,GAAIsE,GAAchD,EAAOhL,MAAQgL,EAAOhL,KAAKvE,OAAS,EAAG,CACvD,IAAM+S,EAAaxD,EAAOhL,KAAKmC,MAAM,EAAG,IAEpC8L,EAAO,6BAAHpO,OACcmL,EAAOhL,KAAKvE,OAAM,0JAAAoE,OAM5BmL,EAAO7C,aAAaoD,IAAI,SAAAkD,GAAG,aAAA5O,OAAW4O,EAAG,WAASC,KAAK,IAAG,oEAMtEF,EAAWhL,QAAQ,SAAAmL,GACjBV,GAAQ,iCAAJpO,OAEM8O,EAAIC,WAAaD,EAAIE,OAAS,MAAK,qBAAAhP,OACvCmL,EAAO7C,aAAaoD,IAAI,SAAAkD,GAAG,aAAA5O,YAAwBhG,IAAb8U,EAAIF,GAAqBE,EAAIF,GAAO,MAAK,WAASC,KAAK,IAAG,0BAGxG,GAEAT,GAAQ,mDAAJpO,OAGEmL,EAAOhL,KAAKvE,OAAS,GAAK,8BAAHoE,OAAiCmL,EAAOhL,KAAKvE,OAAM,kBAAmB,GAAE,wBAIrGuS,EAAWO,UAAYN,CACzB,CACF,CAzXAnN,OAAOgO,QAAOnQ,EAAAX,IAAA/D,EAAC,SAAAoI,IAAA,IAAA0M,EAAAC,EAAA,OAAAhR,IAAAC,EAAA,SAAA8E,GAAA,cAAAA,EAAAzG,GAAA,OAMb,OALMyS,EAAc7T,SAASwO,eAAe,gBACtCsF,EAAU9T,SAASwO,eAAe,YACpCqF,IAAaA,EAAYjC,MAAMC,QAAU,QACzCiC,IAASA,EAAQlC,MAAMC,QAAU,QAErChK,EAAAzG,EAAA,EACM8M,IAAiB,OAGvBI,IAAqB,cAAAzG,EAAA7F,EAAA,KAAAmF,EAAA,KAypBtB9H,OAAe0U,iBAlChB,WACM9F,GACFA,EAAW8F,mBAEb,IAAMC,EAAiBhU,SAASwO,eAAe,eAC3CwF,IACFA,EAAeX,UAAY,sHAE/B,EA2BChU,OAAe4U,kBAxBhB,WACE,GAAKhG,EAAL,CAEA,IAAMpF,EAAcoF,EAAWiG,iBACzBC,EAAa,CACjBnP,WAAW,IAAIC,MAAOC,cACtB2D,YAAAA,EACA1D,UAAWC,UAAUD,UACrBkC,IAAKhI,OAAOU,SAASiB,MAGjBoT,EAAO,IAAIC,KAAK,CAAClM,KAAKC,UAAU+L,EAAY,KAAM,IAAK,CAAE/C,KAAM,qBAC/D/J,EAAMiN,IAAIC,gBAAgBH,GAC1BpS,EAAIhC,SAASwU,cAAc,KACjCxS,EAAEhB,KAAOqG,EACTrF,EAAEyS,SAAW,uBAAH9P,QAA0B,IAAIM,MAAOC,cAAckL,MAAM,KAAK,GAAE,SAC1EpQ,SAASkI,KAAKwM,YAAY1S,GAC1BA,EAAE2S,QACF3U,SAASkI,KAAK0M,YAAY5S,GAC1BsS,IAAIO,gBAAgBxN,EAlBG,CAmBzB,C,ICzsBiC,IAAIiN,IAAI,a","sources":["webpack://excel-custom-functions/webpack/bootstrap","webpack://excel-custom-functions/webpack/runtime/global","webpack://excel-custom-functions/webpack/runtime/hasOwnProperty shorthand","webpack://excel-custom-functions/webpack/runtime/publicPath","webpack://excel-custom-functions/webpack/runtime/jsonp chunk loading","webpack://excel-custom-functions/./src/taskpane/seeq-api-client.ts","webpack://excel-custom-functions/./src/taskpane/taskpane.ts","webpack://excel-custom-functions/./src/taskpane/taskpane.html"],"sourcesContent":["// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/^blob:/, \"\").replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t926: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","/*\n * Seeq API Client for Proxy Server (SqExcelWeb)\n * This client communicates with the FastAPI proxy server to avoid CORS issues\n */\n\nexport interface SeeqAuthResult {\n  success: boolean;\n  message: string;\n  user?: string;\n  server_url?: string;\n  error?: string;\n  token?: string;\n}\n\nexport interface SeeqConnectionResult {\n  success: boolean;\n  message: string;\n  status_code?: number;\n  error?: string;\n  diagnostics?: {\n    cors_headers?: any;\n    response_headers?: any;\n    request_timing?: number;\n    user_agent?: string;\n    origin?: string;\n    app_domain?: string;\n    network_type?: string;\n    ssl_info?: any;\n    cors_analysis?: any;\n    error_analysis?: any;\n    cors_status?: string;\n  };\n}\n\nexport interface SeeqSensor {\n  ID: string;\n  Name: string;\n  Type: string;\n  Original_Name?: string;\n  Status?: string;\n}\n\nexport interface SeeqSearchResult {\n  success: boolean;\n  message: string;\n  search_results: SeeqSensor[];\n  sensor_count: number;\n  error?: string;\n}\n\nexport interface SeeqDataResult {\n  success: boolean;\n  message: string;\n  search_results: SeeqSensor[];\n  data: any[];\n  data_columns: string[];\n  data_index: string[];\n  sensor_count: number;\n  time_range: {\n    start: string;\n    end: string;\n    grid: string;\n  };\n  error?: string;\n}\n\nexport class SeeqAPIClient {\n  private proxyUrl: string;\n  private seeqServerUrl: string;\n  private authToken: string | null = null;\n  private credentials: any = null;\n  private diagnosticLog: any[] = [];\n\n  constructor(seeqServerUrl: string) {\n    this.seeqServerUrl = seeqServerUrl.replace(/\\/$/, ''); // Remove trailing slash\n    this.proxyUrl = 'https://sqexcel.up.railway.app';\n    this.logDiagnostic('CLIENT_INIT', `SeeqAPIClient initialized with proxy: ${this.proxyUrl}, Seeq server: ${this.seeqServerUrl}`);\n  }\n\n  /**\n   * Log diagnostic information for debugging\n   */\n  private logDiagnostic(category: string, message: string, data?: any): void {\n    const logEntry = {\n      timestamp: new Date().toISOString(),\n      category,\n      message,\n      data,\n      userAgent: navigator.userAgent,\n      origin: window.location.origin,\n      appDomain: this.detectAppDomain(),\n      networkInfo: this.getNetworkInfo()\n    };\n    \n    this.diagnosticLog.push(logEntry);\n  }\n\n  /**\n   * Detect the current AppDomain context\n   */\n  private detectAppDomain(): string {\n    try {\n      if (typeof Office !== 'undefined' && Office.context) {\n        return `Office.js - ${Office.context.host || 'Unknown Host'}`;\n      }\n      if (window.location.protocol === 'https:') {\n        return 'HTTPS Web Context';\n      }\n      if (window.location.protocol === 'http:') {\n        return 'HTTP Web Context';\n      }\n      if (window.location.protocol === 'file:') {\n        return 'File Protocol Context';\n      }\n      return `Unknown Context - ${window.location.protocol}`;\n    } catch (error) {\n      return `Error detecting context: ${error}`;\n    }\n  }\n\n  /**\n   * Get network information\n   */\n  private getNetworkInfo(): any {\n    try {\n      const connection = (navigator as any).connection || (navigator as any).mozConnection || (navigator as any).webkitConnection;\n      return {\n        online: navigator.onLine,\n        connectionType: connection?.effectiveType || 'unknown',\n        downlink: connection?.downlink || 'unknown',\n        rtt: connection?.rtt || 'unknown'\n      };\n    } catch (error) {\n      return { online: navigator.onLine, error: error.toString() };\n    }\n  }\n\n  /**\n   * Get comprehensive diagnostic information\n   */\n  getDiagnostics(): any {\n    return {\n      clientInfo: {\n        proxyUrl: this.proxyUrl,\n        seeqServerUrl: this.seeqServerUrl,\n        isAuthenticated: !!this.authToken,\n        diagnosticLogCount: this.diagnosticLog.length\n      },\n      environment: {\n        userAgent: navigator.userAgent,\n        origin: window.location.origin,\n        appDomain: this.detectAppDomain(),\n        networkInfo: this.getNetworkInfo(),\n        timestamp: new Date().toISOString()\n      },\n      recentLogs: this.diagnosticLog.slice(-20) // Last 20 log entries\n    };\n  }\n\n  /**\n   * Clear diagnostic logs\n   */\n  clearDiagnostics(): void {\n    this.diagnosticLog = [];\n    this.logDiagnostic('DIAGNOSTICS_CLEARED', 'Diagnostic logs cleared');\n  }\n\n  /**\n   * Test connection to the proxy server\n   */\n  async testConnection(): Promise<SeeqConnectionResult> {\n    const startTime = Date.now();\n    const url = `${this.proxyUrl}/api/seeq/test-connection`;\n    \n    this.logDiagnostic('PROXY_CONNECTION_TEST_START', `Testing connection to proxy server: ${this.proxyUrl}`, {\n      url,\n      seeqServerUrl: this.seeqServerUrl,\n      appDomain: this.detectAppDomain(),\n      networkInfo: this.getNetworkInfo()\n    });\n    \n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          seeq_url: this.seeqServerUrl\n        })\n      });\n\n      const requestTime = Date.now() - startTime;\n      \n      // Log all response headers\n      const allHeaders: any = {};\n      response.headers.forEach((value, key) => {\n        allHeaders[key] = value;\n      });\n\n      this.logDiagnostic('PROXY_CONNECTION_RESPONSE', `Proxy connection test response received`, {\n        status: response.status,\n        statusText: response.statusText,\n        requestTime,\n        allHeaders,\n        url: response.url\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        this.logDiagnostic('PROXY_CONNECTION_SUCCESS', 'Proxy connection test successful', data);\n        \n        return {\n          success: true,\n          message: data.message || \"Proxy server is reachable and can connect to Seeq\",\n          status_code: response.status,\n          diagnostics: {\n            response_headers: allHeaders,\n            request_timing: requestTime,\n            user_agent: navigator.userAgent,\n            origin: window.location.origin,\n            app_domain: this.detectAppDomain(),\n            network_type: this.getNetworkInfo().connectionType,\n            cors_status: 'OK'\n          }\n        };\n      } else {\n        const errorData = await response.json().catch(() => ({}));\n        this.logDiagnostic('PROXY_CONNECTION_FAILED', `Proxy connection test failed with status: ${response.status}`, {\n          status: response.status,\n          statusText: response.statusText,\n          headers: allHeaders,\n          errorData\n        });\n        \n        return {\n          success: false,\n          message: errorData.message || `Proxy server responded with status code: ${response.status}`,\n          status_code: response.status,\n          error: errorData.error || `HTTP ${response.status}`,\n          diagnostics: {\n            response_headers: allHeaders,\n            request_timing: requestTime,\n            user_agent: navigator.userAgent,\n            origin: window.location.origin,\n            app_domain: this.detectAppDomain(),\n            network_type: this.getNetworkInfo().connectionType,\n            cors_status: 'OK'\n          }\n        };\n      }\n    } catch (error: any) {\n      const requestTime = Date.now() - startTime;\n      \n      this.logDiagnostic('PROXY_CONNECTION_ERROR', `Proxy connection test error`, {\n        error: error.message,\n        errorName: error.name,\n        errorStack: error.stack,\n        requestTime,\n        url\n      });\n      \n      let message = \"Proxy connection test failed\";\n      let errorType = \"Unknown\";\n      \n      if (error.name === 'TypeError' && error.message.includes('fetch')) {\n        message = \"Cannot connect to proxy server - connection refused. This may be due to network issues.\";\n        errorType = \"ConnectionError\";\n      } else if (error.name === 'AbortError') {\n        message = \"Connection timeout - the proxy server took too long to respond.\";\n        errorType = \"Timeout\";\n      } else if (error.message.includes('Failed to fetch')) {\n        message = \"Connection failed - unable to reach the proxy server. This may be due to network problems.\";\n        errorType = \"FetchError\";\n      } else {\n        message = `Proxy connection test failed: ${error.message}`;\n        errorType = error.message;\n      }\n      \n      return {\n        success: false,\n        message,\n        error: errorType,\n        diagnostics: {\n          request_timing: requestTime,\n          user_agent: navigator.userAgent,\n          origin: window.location.origin,\n          app_domain: this.detectAppDomain(),\n          network_type: this.getNetworkInfo().connectionType,\n          cors_status: 'OK'\n        }\n      };\n    }\n  }\n\n  /**\n   * Authenticate with Seeq server through proxy\n   */\n  async authenticate(accessKey: string, password: string, authProvider: string = 'Seeq', ignoreSslErrors: boolean = false): Promise<SeeqAuthResult> {\n    try {\n      // Store credentials for later use\n      this.credentials = {\n        accessKey,\n        password,\n        authProvider,\n        ignoreSslErrors,\n        seeq_url: this.seeqServerUrl\n      };\n\n      this.logDiagnostic('PROXY_AUTH_START', `Attempting to authenticate through proxy: ${this.proxyUrl}`, {\n        seeqServerUrl: this.seeqServerUrl,\n        accessKey,\n        authProvider\n      });\n\n      const response = await fetch(`${this.proxyUrl}/api/seeq/auth`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          seeq_url: this.seeqServerUrl,\n          username: accessKey,\n          password: password,\n          auth_provider: authProvider,\n          ignore_ssl_errors: ignoreSslErrors\n        })\n      });\n\n      this.logDiagnostic('PROXY_AUTH_RESPONSE', `Proxy authentication response received`, {\n        status: response.status,\n        statusText: response.statusText\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        this.authToken = data.token || 'authenticated';\n        \n        this.logDiagnostic('PROXY_AUTH_SUCCESS', 'Proxy authentication successful', {\n          user: data.user,\n          server_url: data.server_url\n        });\n        \n        // Store credentials in backend for Excel functions to use\n        try {\n          await this.storeCredentialsForExcel();\n        } catch (storeError) {\n          console.warn('Failed to store credentials for Excel functions:', storeError);\n          // Don't fail the authentication if credential storage fails\n        }\n        \n        return {\n          success: true,\n          message: data.message || `Successfully authenticated as ${accessKey}`,\n          user: data.user || accessKey,\n          server_url: data.server_url || this.seeqServerUrl,\n          token: this.authToken || undefined\n        };\n      } else {\n        const errorData = await response.json().catch(() => ({}));\n        this.logDiagnostic('PROXY_AUTH_FAILED', 'Proxy authentication failed', {\n          status: response.status,\n          errorData\n        });\n        \n        return {\n          success: false,\n          message: errorData.message || `Authentication failed with status ${response.status}`,\n          error: errorData.error || `HTTP ${response.status}`\n        };\n      }\n    } catch (error: any) {\n      this.logDiagnostic('PROXY_AUTH_ERROR', 'Proxy authentication error', {\n        error: error.message,\n        errorName: error.name\n      });\n      \n      let errorMessage = 'Authentication failed';\n      let errorType = 'Unknown';\n      \n      if (error.name === 'TypeError' && error.message.includes('fetch')) {\n        errorMessage = 'Network error: Cannot connect to proxy server. Please check your internet connection.';\n        errorType = 'NetworkError';\n      } else if (error.name === 'AbortError') {\n        errorMessage = 'Request timeout: The authentication request took too long. Please try again.';\n        errorType = 'TimeoutError';\n      } else if (error.message.includes('Failed to fetch')) {\n        errorMessage = 'Connection failed: Unable to reach the proxy server. This may be due to network issues.';\n        errorType = 'ConnectionError';\n      } else {\n        errorMessage = `Authentication failed: ${error.message}`;\n        errorType = error.name || 'UnknownError';\n      }\n      \n      return {\n        success: false,\n        message: errorMessage,\n        error: errorType\n      };\n    }\n  }\n\n  /**\n   * Store credentials in backend for Excel functions to use\n   */\n  private async storeCredentialsForExcel(): Promise<void> {\n    if (!this.credentials) {\n      throw new Error('No credentials available to store');\n    }\n\n    const response = await fetch(`${this.proxyUrl}/api/seeq/credentials`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        url: this.seeqServerUrl,\n        accessKey: this.credentials.accessKey,\n        password: this.credentials.password,\n        authProvider: this.credentials.authProvider,\n        ignoreSslErrors: this.credentials.ignoreSslErrors,\n        timestamp: new Date().toISOString()\n      })\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({}));\n      throw new Error(`Failed to store credentials: ${errorData.error || response.statusText}`);\n    }\n  }\n\n  /**\n   * Search for sensors in Seeq through proxy\n   */\n  async searchSensors(sensorNames: string[]): Promise<SeeqSearchResult> {\n    if (!this.authToken && !this.credentials) {\n      return {\n        success: false,\n        message: \"Not authenticated. Please authenticate first.\",\n        error: \"Authentication required\",\n        search_results: [],\n        sensor_count: 0\n      };\n    }\n\n    try {\n      this.logDiagnostic('PROXY_SEARCH_START', `Searching for sensors through proxy`, {\n        sensorNames,\n        seeqServerUrl: this.seeqServerUrl\n      });\n\n      const response = await fetch(`${this.proxyUrl}/api/seeq/search`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          seeq_url: this.seeqServerUrl,\n          sensor_names: sensorNames,\n          username: this.credentials?.accessKey,\n          password: this.credentials?.password,\n          auth_provider: this.credentials?.authProvider || 'Seeq'\n        })\n      });\n\n      this.logDiagnostic('PROXY_SEARCH_RESPONSE', `Proxy search response received`, {\n        status: response.status,\n        statusText: response.statusText\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        this.logDiagnostic('PROXY_SEARCH_SUCCESS', 'Proxy search successful', {\n          sensorCount: data.sensor_count,\n          searchResults: data.search_results\n        });\n\n        return {\n          success: true,\n          message: data.message || `Found ${data.sensor_count} sensors`,\n          search_results: data.search_results || [],\n          sensor_count: data.sensor_count || 0\n        };\n      } else {\n        const errorData = await response.json().catch(() => ({}));\n        this.logDiagnostic('PROXY_SEARCH_FAILED', 'Proxy search failed', {\n          status: response.status,\n          errorData\n        });\n\n        return {\n          success: false,\n          message: errorData.message || `Search failed with status ${response.status}`,\n          error: errorData.error || `HTTP ${response.status}`,\n          search_results: [],\n          sensor_count: 0\n        };\n      }\n    } catch (error: any) {\n      this.logDiagnostic('PROXY_SEARCH_ERROR', 'Proxy search error', {\n        error: error.message,\n        errorName: error.name\n      });\n\n      return {\n        success: false,\n        message: `Sensor search failed: ${error.message}`,\n        error: error.message,\n        search_results: [],\n        sensor_count: 0\n      };\n    }\n  }\n\n  /**\n   * Search for sensors and pull their data through proxy\n   */\n  async searchAndPullSensors(sensorNames: string[], startTime: string, endTime: string, grid: string = '15min'): Promise<SeeqDataResult> {\n    try {\n      this.logDiagnostic('PROXY_SEARCH_PULL_START', `Searching and pulling sensor data through proxy`, {\n        sensorNames,\n        startTime,\n        endTime,\n        grid,\n        seeqServerUrl: this.seeqServerUrl\n      });\n\n      const response = await fetch(`${this.proxyUrl}/api/seeq/data`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          seeq_url: this.seeqServerUrl,\n          sensor_names: sensorNames,\n          start_time: startTime,\n          end_time: endTime,\n          grid: grid,\n          username: this.credentials?.accessKey,\n          password: this.credentials?.password,\n          auth_provider: this.credentials?.authProvider || 'Seeq'\n        })\n      });\n\n      this.logDiagnostic('PROXY_SEARCH_PULL_RESPONSE', `Proxy search and pull response received`, {\n        status: response.status,\n        statusText: response.statusText\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        this.logDiagnostic('PROXY_SEARCH_PULL_SUCCESS', 'Proxy search and pull successful', {\n          sensorCount: data.sensor_count,\n          dataLength: data.data?.length || 0,\n          dataColumns: data.data_columns\n        });\n\n        return {\n          success: true,\n          message: data.message || `Successfully retrieved data for ${data.sensor_count} sensors`,\n          search_results: data.search_results || [],\n          data: data.data || [],\n          data_columns: data.data_columns || [],\n          data_index: data.data_index || [],\n          sensor_count: data.sensor_count || 0,\n          time_range: {\n            start: startTime,\n            end: endTime,\n            grid: grid\n          }\n        };\n      } else {\n        const errorData = await response.json().catch(() => ({}));\n        this.logDiagnostic('PROXY_SEARCH_PULL_FAILED', 'Proxy search and pull failed', {\n          status: response.status,\n          errorData\n        });\n\n        return {\n          success: false,\n          message: errorData.message || `Search and pull failed with status ${response.status}`,\n          error: errorData.error || `HTTP ${response.status}`,\n          search_results: [],\n          data: [],\n          data_columns: [],\n          data_index: [],\n          sensor_count: 0,\n          time_range: { start: startTime, end: endTime, grid }\n        };\n      }\n    } catch (error: any) {\n      this.logDiagnostic('PROXY_SEARCH_PULL_ERROR', 'Proxy search and pull error', {\n        error: error.message,\n        errorName: error.name\n      });\n\n      return {\n        success: false,\n        message: `Search and pull operation failed: ${error.message}`,\n        error: error.message,\n        search_results: [],\n        data: [],\n        data_columns: [],\n        data_index: [],\n        sensor_count: 0,\n        time_range: { start: startTime, end: endTime, grid }\n      };\n    }\n  }\n\n  /**\n   * Get current authentication status\n   */\n  getAuthStatus(): { isAuthenticated: boolean; user?: string } {\n    return {\n      isAuthenticated: !!this.authToken,\n      user: this.credentials?.accessKey\n    };\n  }\n\n  /**\n   * Clear authentication\n   */\n  async logout(): Promise<void> {\n    try {\n      if (this.authToken) {\n        this.logDiagnostic('PROXY_LOGOUT_START', 'Logging out through proxy');\n        \n        const response = await fetch(`${this.proxyUrl}/api/seeq/auth`, {\n          method: 'DELETE',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            seeq_url: this.seeqServerUrl,\n            username: this.credentials?.accessKey\n          })\n        });\n\n        this.logDiagnostic('PROXY_LOGOUT_RESPONSE', `Proxy logout response received`, {\n          status: response.status,\n          statusText: response.statusText\n        });\n      }\n      \n      // Clear credentials from backend for Excel functions\n      try {\n        await fetch(`${this.proxyUrl}/api/seeq/credentials`, {\n          method: 'DELETE',\n          headers: {\n            'Content-Type': 'application/json',\n          }\n        });\n      } catch (clearError) {\n        console.warn('Failed to clear credentials from backend:', clearError);\n        // Don't fail logout if credential clearing fails\n      }\n    } catch (error: any) {\n      this.logDiagnostic('PROXY_LOGOUT_ERROR', 'Proxy logout error', {\n        error: error.message\n      });\n    } finally {\n      this.authToken = null;\n      this.credentials = null;\n    }\n  }\n\n  /**\n   * Get stored credentials for persistence\n   */\n  getCredentials(): any {\n    return this.credentials;\n  }\n\n  /**\n   * Set credentials from storage\n   */\n  setCredentials(credentials: any): void {\n    this.credentials = credentials;\n  }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global console, document, Excel, Office */\n\n// Import CSS for styling\nimport './taskpane.css';\n\n// Import the new Seeq API client\nimport { SeeqAPIClient } from './seeq-api-client';\n\n// Version will be dynamically loaded from version.json\nlet ADDIN_VERSION = \"Loading...\";\n\n// Global API client instance\nlet seeqClient: SeeqAPIClient | null = null;\n\n// Load version information from version.json\nasync function loadVersionInfo(): Promise<void> {\n  try {\n    // Try relative path first, then fallback to full URL\n    let response = await fetch('./version.json');\n    \n    if (!response.ok) {\n      // Fallback to full URL if relative path fails\n      response = await fetch('https://adraughon.github.io/SqExcel/version.json');\n    }\n    \n    if (response.ok) {\n      const versionData = await response.json();\n      ADDIN_VERSION = versionData.version;\n    } else {\n      ADDIN_VERSION = \"Version info unavailable\";\n    }\n  } catch (error) {\n    ADDIN_VERSION = \"Version info unavailable\";\n  }\n}\n\n// The initialize function must be run each time a new page is loaded\nOffice.onReady(async () => {\n  const sideloadMsg = document.getElementById(\"sideload-msg\");\n  const appBody = document.getElementById(\"app-body\");\n  if (sideloadMsg) sideloadMsg.style.display = \"none\";\n  if (appBody) appBody.style.display = \"flex\";\n  \n  // Load version information first\n  await loadVersionInfo();\n  \n  // Initialize Seeq authentication\n  initializeSeeqAuth();\n});\n\n// Seeq Authentication Interface\ninterface SeeqAuthResult {\n  success: boolean;\n  message: string;\n  user?: string;\n  server_url?: string;\n  error?: string;\n}\n\ninterface SeeqConnectionResult {\n  success: boolean;\n  message: string;\n  status_code?: number;\n  error?: string;\n}\n\n// Seeq Authentication Functions\nfunction initializeSeeqAuth(): void {\n  const authenticateBtn = document.getElementById(\"authenticate\") as HTMLButtonElement;\n  const logoutBtn = document.getElementById(\"logout\") as HTMLButtonElement;\n  const searchSensorsBtn = document.getElementById(\"search-sensors\") as HTMLButtonElement;\n  const pullDataBtn = document.getElementById(\"pull-data\") as HTMLButtonElement;\n\n  if (authenticateBtn) {\n    authenticateBtn.onclick = authenticateWithSeeq;\n  }\n  \n  if (logoutBtn) {\n    logoutBtn.onclick = logoutFromSeeq;\n  }\n\n  if (searchSensorsBtn) {\n    searchSensorsBtn.onclick = searchSensors;\n  }\n\n  if (pullDataBtn) {\n    pullDataBtn.onclick = pullSensorData;\n  }\n\n  // Load saved credentials if available\n  loadSavedCredentials();\n  \n  // Display version number to prove we're using new code\n  showAuthStatus(`Add-in Version: ${ADDIN_VERSION}`, \"info\");\n}\n\n\nasync function authenticateWithSeeq(): Promise<void> {\n  const url = (document.getElementById(\"seeq-url\") as HTMLInputElement)?.value;\n  const accessKey = (document.getElementById(\"seeq-access-key\") as HTMLInputElement)?.value;\n  const password = (document.getElementById(\"seeq-password\") as HTMLInputElement)?.value;\n\n  if (!url || !accessKey || !password) {\n    showAuthStatus(\"Please fill in all required fields\", \"error\");\n    return;\n  }\n\n  showAuthStatus(\"Authenticating...\", \"loading\");\n  \n  try {\n    // Use the API client to authenticate\n    if (!seeqClient) {\n      seeqClient = new SeeqAPIClient(url);\n    }\n    \n    const result = await seeqClient.authenticate(accessKey, password, 'Seeq', false);\n    \n    if (result.success) {\n      showAuthStatus(\"Authentication successful\", \"success\");\n      saveCredentials(url, accessKey, password, false);\n      updateAuthUI(true);\n      // Update Excel function cache\n      updateExcelCache(\"auth\", result);\n    } else {\n      showAuthStatus(result.message, \"error\");\n    }\n  } catch (error) {\n    showAuthStatus(`Authentication failed: ${error}`, \"error\");\n  }\n}\n\nasync function searchSensors(): Promise<void> {\n  const sensorNamesInput = (document.getElementById(\"sensor-names\") as HTMLInputElement)?.value;\n  \n  if (!sensorNamesInput) {\n    showAuthStatus(\"Please enter sensor names to search for\", \"error\");\n    return;\n  }\n\n  const sensorNames = sensorNamesInput.split(',').map(name => name.trim()).filter(name => name);\n  \n  if (sensorNames.length === 0) {\n    showAuthStatus(\"Please enter valid sensor names\", \"error\");\n    return;\n  }\n\n  showAuthStatus(\"Searching for sensors...\", \"loading\");\n  \n  try {\n    // Use the API client to search for sensors\n    if (!seeqClient) {\n      showAuthStatus(\"Please test connection first\", \"error\");\n      return;\n    }\n    \n    const result = await seeqClient.searchSensors(sensorNames);\n    \n    if (result.success) {\n      showAuthStatus(`Found ${result.sensor_count} sensors`, \"success\");\n      // Update Excel function cache\n      updateExcelCache(\"search\", result);\n      // Display results\n      displaySearchResults(result.search_results);\n    } else {\n      showAuthStatus(result.message, \"error\");\n    }\n  } catch (error) {\n    showAuthStatus(`Sensor search failed: ${error}`, \"error\");\n  }\n}\n\nasync function pullSensorData(): Promise<void> {\n  const sensorNamesInput = (document.getElementById(\"sensor-names\") as HTMLInputElement)?.value;\n  const startTimeInput = (document.getElementById(\"start-time\") as HTMLInputElement)?.value;\n  const endTimeInput = (document.getElementById(\"end-time\") as HTMLInputElement)?.value;\n  const gridInput = (document.getElementById(\"grid-interval\") as HTMLInputElement)?.value;\n  \n  if (!sensorNamesInput || !startTimeInput || !endTimeInput) {\n    showAuthStatus(\"Please fill in all required fields\", \"error\");\n    return;\n  }\n\n  const sensorNames = sensorNamesInput.split(',').map(name => name.trim()).filter(name => name);\n  const grid = gridInput || \"15min\";\n  \n  if (sensorNames.length === 0) {\n    showAuthStatus(\"Please enter valid sensor names\", \"error\");\n    return;\n  }\n\n  showAuthStatus(\"Pulling sensor data...\", \"loading\");\n  \n  try {\n    // Use the API client to search and pull data\n    if (!seeqClient) {\n      showAuthStatus(\"Please test connection first\", \"error\");\n      return;\n    }\n    \n    const result = await seeqClient.searchAndPullSensors(sensorNames, startTimeInput, endTimeInput, grid);\n    \n    if (result.success) {\n      showAuthStatus(`Retrieved data for ${result.sensor_count} sensors`, \"success\");\n      // Update Excel function cache\n      updateExcelCache(\"data\", result);\n      // Display results\n      displayDataResults(result);\n    } else {\n      showAuthStatus(result.message, \"error\");\n    }\n  } catch (error) {\n    showAuthStatus(`Data retrieval failed: ${error}`, \"error\");\n  }\n}\n\nfunction logoutFromSeeq(): void {\n  // Clear saved credentials\n  localStorage.removeItem(\"seeq_credentials\");\n  \n  // Clear API client state\n  if (seeqClient) {\n    seeqClient.logout();\n  }\n  \n  // Update UI\n  updateAuthUI(false);\n  showAuthStatus(\"Logged out successfully\", \"info\");\n  \n  // Clear form fields\n  (document.getElementById(\"seeq-url\") as HTMLInputElement).value = \"\";\n  (document.getElementById(\"seeq-access-key\") as HTMLInputElement).value = \"\";\n  (document.getElementById(\"seeq-password\") as HTMLInputElement).value = \"\";\n}\n\nfunction showAuthStatus(message: string, type: \"success\" | \"error\" | \"info\" | \"loading\" | \"warning\"): void {\n  const statusElement = document.getElementById(\"auth-status\");\n  if (statusElement) {\n    statusElement.textContent = message;\n    statusElement.className = `auth-status ${type}`;\n  }\n}\n\nfunction updateAuthUI(isAuthenticated: boolean): void {\n  const authBtn = document.getElementById(\"authenticate\") as HTMLButtonElement;\n  const logoutBtn = document.getElementById(\"logout\") as HTMLButtonElement;\n  const urlInput = document.getElementById(\"seeq-url\") as HTMLInputElement;\n  const accessKeyInput = document.getElementById(\"seeq-access-key\") as HTMLInputElement;\n  const passwordInput = document.getElementById(\"seeq-password\") as HTMLInputElement;\n\n  if (isAuthenticated) {\n    authBtn.style.display = \"none\";\n    logoutBtn.style.display = \"inline-block\";\n    \n    // Disable form inputs\n    urlInput.disabled = true;\n    accessKeyInput.disabled = true;\n    passwordInput.disabled = true;\n  } else {\n    authBtn.style.display = \"inline-block\";\n    logoutBtn.style.display = \"none\";\n    \n    // Enable form inputs\n    urlInput.disabled = false;\n    accessKeyInput.disabled = false;\n    passwordInput.disabled = false;\n  }\n}\n\nfunction saveCredentials(url: string, accessKey: string, password: string, ignoreSsl: boolean): void {\n  const credentials = {\n    url,\n    accessKey,\n    password,\n    ignoreSsl: false,\n    timestamp: new Date().toISOString()\n  };\n  \n  localStorage.setItem(\"seeq_credentials\", JSON.stringify(credentials));\n}\n\n// Load saved credentials from localStorage\nfunction loadSavedCredentials(): void {\n  const saved = localStorage.getItem(\"seeq_credentials\");\n  if (saved) {\n    try {\n      const credentials = JSON.parse(saved);\n      \n      // Populate form fields\n      (document.getElementById(\"seeq-url\") as HTMLInputElement).value = credentials.url || \"\";\n      (document.getElementById(\"seeq-access-key\") as HTMLInputElement).value = credentials.accessKey || \"\";\n      (document.getElementById(\"seeq-password\") as HTMLInputElement).value = credentials.password || \"\";\n      \n      // Check if credentials are still valid (less than 24 hours old)\n      const timestamp = new Date(credentials.timestamp);\n      const now = new Date();\n      const hoursDiff = (now.getTime() - timestamp.getTime()) / (1000 * 60 * 60);\n      \n      if (hoursDiff < 24) {\n        // Credentials are still valid, update UI\n        updateAuthUI(true);\n        showAuthStatus(\"Using saved credentials\", \"info\");\n        \n        // Recreate API client with saved URL\n        if (credentials.url) {\n          seeqClient = new SeeqAPIClient(credentials.url);\n        }\n      } else {\n        // Credentials expired, remove them\n        localStorage.removeItem(\"seeq_credentials\");\n      }\n    } catch (error) {\n      localStorage.removeItem(\"seeq_credentials\");\n    }\n  }\n}\n\n// Update Excel function cache\nfunction updateExcelCache(operationType: string, data: any): void {\n  try {\n    const jsonData = JSON.stringify(data);\n    const cacheUpdate = `=SEEQ_UPDATE_CACHE(\"${operationType}\", '${jsonData}')`;\n    \n    Excel.run(async (context) => {\n      const worksheet = context.workbook.worksheets.getActiveWorksheet();\n      const range = worksheet.getRange(\"A1\");\n      range.values = [[cacheUpdate]];\n      await context.sync();\n    }).catch(error => {\n      // Silent fail for cache update\n    });\n  } catch (error) {\n    // Silent fail for cache update\n  }\n}\n\n// Display search results in the UI\nfunction displaySearchResults(results: any[]): void {\n  const resultsDiv = document.getElementById(\"search-results\");\n  if (resultsDiv && results.length > 0) {\n    let html = `\n      <h3>Search Results (${results.length} sensors)</h3>\n      <div class=\"results-table\">\n        <table>\n          <thead>\n            <tr>\n              <th>Original Name</th>\n              <th>Seeq Name</th>\n              <th>ID</th>\n              <th>Type</th>\n              <th>Status</th>\n            </tr>\n          </thead>\n          <tbody>\n    `;\n    \n    results.forEach(result => {\n      html += `\n        <tr>\n          <td>${result.Original_Name || result.Name || \"N/A\"}</td>\n          <td>${result.Name || \"N/A\"}</td>\n          <td>${result.ID || \"Not Found\"}</td>\n          <td>${result.Type || \"N/A\"}</td>\n          <td>${result.Status || \"Unknown\"}</td>\n        </tr>\n      `;\n    });\n    \n    html += `\n          </tbody>\n        </table>\n      </div>\n    `;\n    \n    resultsDiv.innerHTML = html;\n  }\n}\n\n// Display data results in the UI\nfunction displayDataResults(result: any): void {\n  const resultsDiv = document.getElementById(\"data-results\");\n  if (resultsDiv && result.data && result.data.length > 0) {\n    const dataToShow = result.data.slice(0, 10); // Show first 10 rows\n    \n    let html = `\n      <h3>Data Results (${result.data.length} rows)</h3>\n      <div class=\"results-table\">\n        <table>\n          <thead>\n            <tr>\n              <th>Timestamp</th>\n              ${result.data_columns.map(col => `<th>${col}</th>`).join('')}\n            </tr>\n          </thead>\n          <tbody>\n    `;\n    \n    dataToShow.forEach(row => {\n      html += `\n        <tr>\n          <td>${row.Timestamp || row.index || \"N/A\"}</td>\n          ${result.data_columns.map(col => `<td>${row[col] !== undefined ? row[col] : \"N/A\"}</td>`).join('')}\n        </tr>\n      `;\n    });\n    \n    html += `\n          </tbody>\n        </table>\n        ${result.data.length > 10 ? `<p><em>Showing first 10 of ${result.data.length} rows</em></p>` : ''}\n      </div>\n    `;\n    \n    resultsDiv.innerHTML = html;\n  }\n}\n\n// Display comprehensive diagnostics\nfunction displayDiagnostics(connectionResult: any, authResult: any = null): void {\n  const diagnosticsDiv = document.getElementById(\"diagnostics\");\n  if (!diagnosticsDiv) return;\n\n  const diagnostics = seeqClient?.getDiagnostics();\n  if (!diagnostics) return;\n\n  let html = `\n    <div class=\"diagnostics-panel\">\n      <h3>🔍 Connection Diagnostics</h3>\n      <div class=\"diagnostic-section\">\n        <h4>Environment Information</h4>\n        <div class=\"diagnostic-grid\">\n          <div class=\"diagnostic-item\">\n            <strong>App Domain:</strong> ${diagnostics.environment.appDomain}\n          </div>\n          <div class=\"diagnostic-item\">\n            <strong>Origin:</strong> ${diagnostics.environment.origin}\n          </div>\n          <div class=\"diagnostic-item\">\n            <strong>Network Type:</strong> ${diagnostics.environment.networkInfo.connectionType}\n          </div>\n          <div class=\"diagnostic-item\">\n            <strong>Online Status:</strong> ${diagnostics.environment.networkInfo.online ? '✅ Online' : '❌ Offline'}\n          </div>\n        </div>\n      </div>\n  `;\n\n  // Connection test results\n  if (connectionResult.diagnostics) {\n    html += `\n      <div class=\"diagnostic-section\">\n        <h4>Connection Test Results</h4>\n        <div class=\"diagnostic-grid\">\n          <div class=\"diagnostic-item\">\n            <strong>Response Time:</strong> ${connectionResult.diagnostics.request_timing}ms\n          </div>\n          <div class=\"diagnostic-item\">\n            <strong>Status Code:</strong> ${connectionResult.status_code}\n          </div>\n          <div class=\"diagnostic-item\">\n            <strong>CORS Status:</strong> ${connectionResult.diagnostics.cors_status}\n          </div>\n        </div>\n    `;\n\n    // Show CORS headers if available\n    if (connectionResult.diagnostics.response_headers) {\n      const corsHeaders = [\n        'access-control-allow-origin',\n        'access-control-allow-methods',\n        'access-control-allow-headers',\n        'access-control-allow-credentials'\n      ];\n      \n      html += `\n        <div class=\"cors-headers\">\n          <h5>CORS Headers:</h5>\n          <ul>\n      `;\n      \n      corsHeaders.forEach(header => {\n        const value = connectionResult.diagnostics.response_headers[header];\n        html += `<li><strong>${header}:</strong> ${value || 'Not set'}</li>`;\n      });\n      \n      html += `</ul></div>`;\n    }\n    \n    html += `</div>`;\n  }\n\n  // Auth endpoint test results\n  if (authResult && authResult.diagnostics) {\n    html += `\n      <div class=\"diagnostic-section\">\n        <h4>Authentication Endpoint Test</h4>\n        <div class=\"diagnostic-grid\">\n          <div class=\"diagnostic-item\">\n            <strong>Response Time:</strong> ${authResult.diagnostics.request_timing}ms\n          </div>\n          <div class=\"diagnostic-item\">\n            <strong>Status Code:</strong> ${authResult.status_code}\n          </div>\n        </div>\n    `;\n\n    // Show CORS analysis if available\n    if (authResult.diagnostics.cors_analysis) {\n      const corsAnalysis = authResult.diagnostics.cors_analysis;\n      html += `\n        <div class=\"cors-analysis\">\n          <h5>CORS Configuration Analysis:</h5>\n          <div class=\"cors-status\">\n            <div class=\"cors-item ${corsAnalysis.allowsOrigin ? 'success' : 'error'}\">\n              <strong>Origin Allowed:</strong> ${corsAnalysis.allowsOrigin ? '✅ Yes' : '❌ No'}\n            </div>\n            <div class=\"cors-item ${corsAnalysis.allowsMethods ? 'success' : 'error'}\">\n              <strong>Methods Allowed:</strong> ${corsAnalysis.allowsMethods ? '✅ Yes' : '❌ No'}\n            </div>\n            <div class=\"cors-item ${corsAnalysis.allowsHeaders ? 'success' : 'error'}\">\n              <strong>Headers Allowed:</strong> ${corsAnalysis.allowsHeaders ? '✅ Yes' : '❌ No'}\n            </div>\n          </div>\n      `;\n\n      if (corsAnalysis.issues.length > 0) {\n        html += `\n          <div class=\"cors-issues\">\n            <h6>Issues Found:</h6>\n            <ul>\n              ${corsAnalysis.issues.map(issue => `<li>❌ ${issue}</li>`).join('')}\n            </ul>\n          </div>\n        `;\n      }\n\n      if (corsAnalysis.recommendations.length > 0) {\n        html += `\n          <div class=\"cors-recommendations\">\n            <h6>Recommendations:</h6>\n            <ul>\n              ${corsAnalysis.recommendations.map(rec => `<li>💡 ${rec}</li>`).join('')}\n            </ul>\n          </div>\n        `;\n      }\n\n      html += `</div>`;\n    }\n    \n    html += `</div>`;\n  }\n\n  // Recent diagnostic logs\n  if (diagnostics.recentLogs && diagnostics.recentLogs.length > 0) {\n    html += `\n      <div class=\"diagnostic-section\">\n        <h4>Recent Diagnostic Logs</h4>\n        <div class=\"log-entries\">\n    `;\n    \n    diagnostics.recentLogs.slice(-10).forEach((log: any) => {\n      const timestamp = new Date(log.timestamp).toLocaleTimeString();\n      html += `\n        <div class=\"log-entry\">\n          <span class=\"log-time\">${timestamp}</span>\n          <span class=\"log-category\">[${log.category}]</span>\n          <span class=\"log-message\">${log.message}</span>\n        </div>\n      `;\n    });\n    \n    html += `</div></div>`;\n  }\n\n  html += `\n      <div class=\"diagnostic-actions\">\n        <button onclick=\"clearDiagnostics()\" class=\"btn-secondary\">Clear Logs</button>\n        <button onclick=\"exportDiagnostics()\" class=\"btn-secondary\">Export Diagnostics</button>\n      </div>\n    </div>\n  `;\n\n  diagnosticsDiv.innerHTML = html;\n}\n\n// Display error diagnostics\nfunction displayErrorDiagnostics(result: any): void {\n  const diagnosticsDiv = document.getElementById(\"diagnostics\");\n  if (!diagnosticsDiv) return;\n\n  const diagnostics = seeqClient?.getDiagnostics();\n  if (!diagnostics) return;\n\n  let html = `\n    <div class=\"diagnostics-panel error\">\n      <h3>❌ Error Diagnostics</h3>\n      <div class=\"error-summary\">\n        <h4>Error Summary</h4>\n        <div class=\"error-details\">\n          <div class=\"error-item\">\n            <strong>Error Message:</strong> ${result.message}\n          </div>\n          <div class=\"error-item\">\n            <strong>Error Type:</strong> ${result.error || 'Unknown'}\n          </div>\n        </div>\n      </div>\n  `;\n\n  // Show error analysis if available\n  if (result.diagnostics && result.diagnostics.error_analysis) {\n    const errorAnalysis = result.diagnostics.error_analysis;\n    html += `\n      <div class=\"diagnostic-section\">\n        <h4>Error Analysis</h4>\n        <div class=\"error-analysis\">\n          <div class=\"analysis-item\">\n            <strong>Error Type:</strong> ${errorAnalysis.errorType}\n          </div>\n          <div class=\"analysis-item\">\n            <strong>Likely Cause:</strong> ${errorAnalysis.likelyCause}\n          </div>\n          <div class=\"analysis-flags\">\n            <div class=\"flag ${errorAnalysis.isCorsRelated ? 'active' : ''}\">CORS Related</div>\n            <div class=\"flag ${errorAnalysis.isNetworkRelated ? 'active' : ''}\">Network Related</div>\n            <div class=\"flag ${errorAnalysis.isSslRelated ? 'active' : ''}\">SSL Related</div>\n            <div class=\"flag ${errorAnalysis.isAppDomainRelated ? 'active' : ''}\">AppDomain Related</div>\n          </div>\n        </div>\n    `;\n\n    if (errorAnalysis.recommendations.length > 0) {\n      html += `\n        <div class=\"recommendations\">\n          <h5>Recommendations:</h5>\n          <ul>\n            ${errorAnalysis.recommendations.map(rec => `<li>💡 ${rec}</li>`).join('')}\n          </ul>\n        </div>\n      `;\n    }\n    \n    html += `</div>`;\n  }\n\n  // Environment information\n  html += `\n    <div class=\"diagnostic-section\">\n      <h4>Environment Information</h4>\n      <div class=\"diagnostic-grid\">\n        <div class=\"diagnostic-item\">\n          <strong>App Domain:</strong> ${diagnostics.environment.appDomain}\n        </div>\n        <div class=\"diagnostic-item\">\n          <strong>Origin:</strong> ${diagnostics.environment.origin}\n        </div>\n        <div class=\"diagnostic-item\">\n          <strong>Network Type:</strong> ${diagnostics.environment.networkInfo.connectionType}\n        </div>\n        <div class=\"diagnostic-item\">\n          <strong>Online Status:</strong> ${diagnostics.environment.networkInfo.online ? '✅ Online' : '❌ Offline'}\n        </div>\n      </div>\n    </div>\n  `;\n\n  html += `\n    <div class=\"diagnostic-actions\">\n      <button onclick=\"clearDiagnostics()\" class=\"btn-secondary\">Clear Logs</button>\n      <button onclick=\"exportDiagnostics()\" class=\"btn-secondary\">Export Diagnostics</button>\n    </div>\n  </div>\n  `;\n\n  diagnosticsDiv.innerHTML = html;\n}\n\n// Clear diagnostics\nfunction clearDiagnostics(): void {\n  if (seeqClient) {\n    seeqClient.clearDiagnostics();\n  }\n  const diagnosticsDiv = document.getElementById(\"diagnostics\");\n  if (diagnosticsDiv) {\n    diagnosticsDiv.innerHTML = '<div class=\"diagnostics-panel\"><p>Diagnostics cleared. Run a connection test to generate new diagnostics.</p></div>';\n  }\n}\n\n// Export diagnostics\nfunction exportDiagnostics(): void {\n  if (!seeqClient) return;\n  \n  const diagnostics = seeqClient.getDiagnostics();\n  const exportData = {\n    timestamp: new Date().toISOString(),\n    diagnostics,\n    userAgent: navigator.userAgent,\n    url: window.location.href\n  };\n  \n  const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });\n  const url = URL.createObjectURL(blob);\n  const a = document.createElement('a');\n  a.href = url;\n  a.download = `sqexcel-diagnostics-${new Date().toISOString().split('T')[0]}.json`;\n  document.body.appendChild(a);\n  a.click();\n  document.body.removeChild(a);\n  URL.revokeObjectURL(url);\n}\n\n// Make functions globally available\n(window as any).clearDiagnostics = clearDiagnostics;\n(window as any).exportDiagnostics = exportDiagnostics;\n","// Imports\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"../../assets/logo-filled.png\", import.meta.url);\n// Module\nvar code = \" <!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"/> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"> <title>SqExcel Add-in</title> <\" + \"script src=\\\"https://appsforoffice.microsoft.com/lib/1/hosted/office.js\\\"><\" + \"/script> <link rel=\\\"stylesheet\\\" href=\\\"https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/office-ui-fabric-core/11.1.0/css/fabric.min.css\\\"/> </head> <body class=\\\"ms-font-m ms-welcome ms-Fabric\\\"> <header class=\\\"ms-welcome__header ms-bgColor-neutralLighter\\\"> <img width=\\\"90\\\" height=\\\"90\\\" src=\\\"\" + ___HTML_LOADER_IMPORT_0___ + \"\\\" alt=\\\"SqExcel\\\" title=\\\"SqExcel\\\"/> <h1 class=\\\"ms-font-su\\\">Welcome to SqExcel</h1> </header> <section id=\\\"sideload-msg\\\" class=\\\"ms-welcome__main\\\"> <h2 class=\\\"ms-font-xl\\\">Please <a target=\\\"_blank\\\" href=\\\"https://learn.microsoft.com/office/dev/add-ins/testing/test-debug-office-add-ins#sideload-an-office-add-in-for-testing\\\">sideload</a> your add-in to see app body.</h2> </section> <main id=\\\"app-body\\\" class=\\\"ms-welcome__main\\\" style=\\\"display:none\\\"> <div class=\\\"seeq-auth-section\\\"> <h3 class=\\\"ms-font-l\\\">Seeq Authentication</h3> <div class=\\\"auth-form\\\"> <div class=\\\"form-group\\\"> <label for=\\\"seeq-url\\\">Seeq Server URL:</label> <input type=\\\"url\\\" id=\\\"seeq-url\\\" placeholder=\\\"https://your-server.seeq.site\\\" class=\\\"ms-TextField-field\\\"> </div> <div class=\\\"form-group\\\"> <label for=\\\"seeq-access-key\\\">Access Key:</label> <input type=\\\"text\\\" id=\\\"seeq-access-key\\\" placeholder=\\\"Your Seeq access key\\\" class=\\\"ms-TextField-field\\\"> </div> <div class=\\\"form-group\\\"> <label for=\\\"seeq-password\\\">Password:</label> <input type=\\\"password\\\" id=\\\"seeq-password\\\" placeholder=\\\"Your Seeq password\\\" class=\\\"ms-TextField-field\\\"> </div> <div class=\\\"auth-buttons\\\"> <button id=\\\"authenticate\\\" class=\\\"ms-Button ms-Button--primary\\\">Authenticate</button> <button id=\\\"logout\\\" class=\\\"ms-Button ms-Button--secondary\\\" style=\\\"display:none\\\">Logout</button> </div> </div> <div id=\\\"auth-status\\\" class=\\\"auth-status\\\"></div> </div> <div id=\\\"diagnostics\\\" class=\\\"diagnostics-section\\\"> <div class=\\\"diagnostics-panel\\\"> <h3>📋 Getting Started</h3> <h4>🔑 Step 1: Create a Seeq Access Key</h4> <ol> <li>Go to your Seeq environment in your web browser</li> <li>Click on your username in the top right corner</li> <li>Select \\\"Access Keys\\\" from the dropdown menu</li> <li>Click \\\"Create Access Key\\\"</li> <li>Give it a name (e.g., \\\"Excel Integration\\\")</li> <li>Copy both the <strong>Key ID</strong> and <strong>Password</strong> - you'll need both!</li> </ol> <h4>🔐 Step 2: Authenticate in Excel</h4> <ol> <li>Enter your Seeq server URL above (e.g., https://your-server.seeq.tech)</li> <li>Enter the Access Key ID and Password from Step 1</li> <li>Click \\\"Authenticate\\\"</li> <li>Once successful, you can use the Excel functions below!</li> </ol> <h4>⚡ Step 3: Use the Excel Functions</h4> <div class=\\\"function-examples\\\"> <div class=\\\"function-example\\\"> <h5>🔍 SEARCH_SENSORS</h5> <p>Find sensors in your Seeq environment:</p> <code>=SEARCH_SENSORS(A1:C1)</code> <p><small>Where A1:C1 contains sensor names like \\\"Temperature\\\", \\\"Pressure\\\", etc.</small></p> <div class=\\\"function-returns\\\"> <strong>Returns:</strong> A table with columns: <ul> <li><strong>Name:</strong> The actual sensor name in Seeq</li> <li><strong>ID:</strong> Unique sensor identifier</li> <li><strong>Datasource Name:</strong> Where the sensor data comes from</li> <li><strong>Value Unit Of Measure:</strong> Units (e.g., °C, PSI, etc.)</li> <li><strong>Description:</strong> Sensor description if available</li> </ul> </div> </div> <div class=\\\"function-example\\\"> <h5>📊 PULL_SENSOR_DATA</h5> <p>Get time series data from sensors:</p> <code>=PULL_SENSOR_DATA(A1:C1,\\\"2024-01-01T00:00:00\\\",\\\"2024-01-31T23:59:59\\\",\\\"15min\\\")</code> <p><small>Parameters: sensor names, start time, end time, grid interval (15min, 1h, 1d, etc.)</small></p> <div class=\\\"function-returns\\\"> <strong>Returns:</strong> A time series table with: <ul> <li><strong>Timestamp column:</strong> Time points (as Excel serial numbers - format as dates to see readable times)</li> <li><strong>Data columns:</strong> One column per sensor with actual measurement values</li> <li><strong>Grid spacing:</strong> Data points at your specified interval (15min, 1h, etc.)</li> </ul> <p><em>Note: Timestamps appear as large numbers - select the timestamp column and format as Date to see readable times!</em></p> </div> </div> </div> <h4>❓ Troubleshooting</h4> <ul> <li><strong>#NAME? errors:</strong> Make sure the add-in is properly loaded</li> <li><strong>Authentication fails:</strong> Check your Seeq server URL and credentials</li> <li><strong>No data returned:</strong> Verify your sensor names exist in Seeq</li> <li><strong>Need help?</strong> <a href=\\\"mailto:austin@radialflow.net\\\">Contact Us</a></li> </ul> </div> </div> <div class=\\\"search-section\\\" style=\\\"display:none\\\"> <h3 class=\\\"ms-font-l\\\">Sensor Search</h3> <div class=\\\"form-group\\\"> <label for=\\\"sensor-names\\\">Sensor Names (comma-separated):</label> <input type=\\\"text\\\" id=\\\"sensor-names\\\" placeholder=\\\"Sensor1, Sensor2, Sensor3\\\" class=\\\"ms-TextField-field\\\"> </div> <div class=\\\"form-group\\\"> <label for=\\\"start-time\\\">Start Time:</label> <input type=\\\"datetime-local\\\" id=\\\"start-time\\\" class=\\\"ms-TextField-field\\\"> </div> <div class=\\\"form-group\\\"> <label for=\\\"end-time\\\">End Time:</label> <input type=\\\"datetime-local\\\" id=\\\"end-time\\\" class=\\\"ms-TextField-field\\\"> </div> <div class=\\\"form-group\\\"> <label for=\\\"grid-interval\\\">Grid Interval:</label> <input type=\\\"text\\\" id=\\\"grid-interval\\\" placeholder=\\\"15min\\\" class=\\\"ms-TextField-field\\\"> </div> <div class=\\\"search-buttons\\\"> <button id=\\\"search-sensors\\\" class=\\\"ms-Button ms-Button--primary\\\">Search Sensors</button> <button id=\\\"pull-data\\\" class=\\\"ms-Button ms-Button--primary\\\">Pull Data</button> </div> <div id=\\\"search-results\\\" class=\\\"results-section\\\"></div> <div id=\\\"data-results\\\" class=\\\"results-section\\\"></div> </div> <p><label id=\\\"item-subject\\\"></label></p> </main> </body> </html> \";\n// Exports\nexport default code;"],"names":["__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","g","globalThis","this","Function","e","window","o","obj","prop","Object","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","tagName","toUpperCase","src","scripts","getElementsByTagName","length","i","test","Error","replace","p","b","baseURI","self","href","t","r","Symbol","n","iterator","toStringTag","c","Generator","u","create","_regeneratorDefine2","f","y","G","v","a","d","bind","l","TypeError","done","value","return","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","_regenerator","w","defineProperty","_invoke","enumerable","configurable","writable","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","_defineProperties","_toPropertyKey","key","_defineProperty","_typeof","toPrimitive","String","_toPrimitive","SeeqAPIClient","seeqServerUrl","_classCallCheck","proxyUrl","logDiagnostic","concat","category","message","data","logEntry","timestamp","Date","toISOString","userAgent","navigator","origin","appDomain","detectAppDomain","networkInfo","getNetworkInfo","diagnosticLog","push","Office","context","host","protocol","error","connection","mozConnection","webkitConnection","online","onLine","connectionType","effectiveType","downlink","rtt","toString","clientInfo","isAuthenticated","authToken","diagnosticLogCount","environment","recentLogs","slice","_testConnection","_callee","startTime","url","response","requestTime","allHeaders","errorData","_requestTime","errorType","_t","_context","now","fetch","method","headers","body","JSON","stringify","seeq_url","forEach","status","statusText","ok","json","success","status_code","diagnostics","response_headers","request_timing","user_agent","app_domain","network_type","cors_status","catch","errorName","name","errorStack","stack","includes","_authenticate","_callee2","accessKey","password","authProvider","ignoreSslErrors","errorMessage","_t2","_t3","_args2","_context2","credentials","username","auth_provider","ignore_ssl_errors","token","user","server_url","storeCredentialsForExcel","console","warn","_x","_x2","_storeCredentialsForExcel","_callee3","_context3","_searchSensors","_callee4","sensorNames","_this$credentials","_this$credentials2","_this$credentials3","_t4","_context4","search_results","sensor_count","sensor_names","sensorCount","searchResults","_x3","_searchAndPullSensors","_callee5","endTime","grid","_this$credentials4","_this$credentials5","_this$credentials6","_data$data","_t5","_args5","_context5","start_time","end_time","dataLength","dataColumns","data_columns","data_index","time_range","start","end","_x4","_x5","_x6","_this$credentials7","_logout","_callee6","_this$credentials8","_t6","_t7","_context6","ADDIN_VERSION","seeqClient","loadVersionInfo","_loadVersionInfo","versionData","version","initializeSeeqAuth","authenticateBtn","getElementById","logoutBtn","searchSensorsBtn","pullDataBtn","onclick","authenticateWithSeeq","logoutFromSeeq","searchSensors","pullSensorData","saved","localStorage","getItem","parse","getTime","updateAuthUI","showAuthStatus","removeItem","loadSavedCredentials","_authenticateWithSeeq","_document$getElementB","_document$getElementB2","_document$getElementB3","result","authenticate","saveCredentials","updateExcelCache","_document$getElementB4","sensorNamesInput","split","map","trim","filter","displaySearchResults","_pullSensorData","_document$getElementB5","_document$getElementB6","_document$getElementB7","_document$getElementB8","startTimeInput","endTimeInput","gridInput","searchAndPullSensors","displayDataResults","logout","type","statusElement","textContent","className","authBtn","urlInput","accessKeyInput","passwordInput","style","display","disabled","ignoreSsl","setItem","operationType","jsonData","cacheUpdate","Excel","run","_ref2","workbook","worksheets","getActiveWorksheet","getRange","values","sync","results","resultsDiv","html","Original_Name","Name","ID","Type","Status","innerHTML","dataToShow","col","join","row","Timestamp","index","onReady","sideloadMsg","appBody","clearDiagnostics","diagnosticsDiv","exportDiagnostics","getDiagnostics","exportData","blob","Blob","URL","createObjectURL","createElement","download","appendChild","click","removeChild","revokeObjectURL"],"sourceRoot":""}